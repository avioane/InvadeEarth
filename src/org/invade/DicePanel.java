/*
 * DicePanel.java
 *
 * Created on July 6, 2005, 4:06 PM
 */

package org.invade;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.List;


/**
 *
 * @author  jcrosm
 */
public class DicePanel extends javax.swing.JPanel {
    
    private Color diceColor = Color.WHITE;
    private Color dotColor = Color.BLACK;
    private List<Die> dice = new ArrayList<Die>();
    
    private static final int DICE_SIZE = 32;
    private static final int DICE_SPACE = 4;
    private static final int DICE_ARC_SIZE = 4;
    private static final Font FONT = new Font("Arial", Font.BOLD, 16);
    
    
    /** Creates new form DicePanel */
    public DicePanel() {
        initComponents();
    }
    
    public Color getDiceColor() {
        return diceColor;
    }
    
    public void setDiceColor(Color diceColor) {
        this.diceColor = diceColor;
    }
    
    public Color getDotColor() {
        return dotColor;
    }
    
    public void setDotColor(Color dotColor) {
        this.dotColor = dotColor;
    }
    
    public void paintComponent(Graphics page) {
        page.setColor(getBackground());
        page.fillRect(0, 0, getWidth(), getHeight());
        page.setFont(FONT);
        for(int i = 0; i < getDice().size(); ++i) {
            Die die = getDice().get(i);
            page.setColor(diceColor);
            int x = i * (DICE_SIZE + DICE_SPACE) + DICE_SPACE;
            int y = DICE_SPACE;
            if( die.getDiceType().equals(DiceType.SIX_SIDED) ) {
                page.fillRoundRect(x, y, DICE_SIZE, DICE_SIZE, DICE_ARC_SIZE, DICE_ARC_SIZE);
            } else {
                page.fillPolygon(new int[]{x + DICE_SIZE/2, x + DICE_SIZE, x + DICE_SIZE/2, x},
                        new int[]{y, y + DICE_SIZE/2, y + DICE_SIZE, y + DICE_SIZE/2}, 4 );
            }
            page.setColor(dotColor);
            drawCenteredString(Integer.toString(die.getValue()), page, new Point(x + DICE_SIZE/2, y + DICE_SIZE/2), 0.3);
        }
    }
    
    /* Draws string on page at (point.x, point.y + h * heightFactor),
     * where h is the height of string, and the string is anchored at
     * approximately the center of the baseline. */
    public void drawCenteredString(String string, Graphics page, Point point,
            double heightFactor) {
        Rectangle2D bounds = page.getFontMetrics().getStringBounds(
                string, page );
        page.drawString( string,
                (int)(point.x - bounds.getWidth() / 2)+1,
                (int)(point.y + bounds.getHeight() * heightFactor) );
    }

    public List<Die> getDice() {
        return dice;
    }

    public void setDice(List<Die> dice) {
        this.dice = dice;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());

        setPreferredSize(new java.awt.Dimension(168, 168));
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
