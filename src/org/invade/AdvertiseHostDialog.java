/*
 * AdvertiseHostDialog.java
 *
 * Created on February 9, 2006, 2:43 PM
 */

package org.invade;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigInteger;
import javax.swing.JOptionPane;
import javax.swing.Timer;

import static org.invade.ServerListHandler.*;
import org.invade.gameserver.Server;

/**
 *
 * @author  jcrosm
 */
public class AdvertiseHostDialog extends javax.swing.JDialog {
    
    private Server server = null;
    private Timer timer;
    private BigInteger listingID = UNKNOWN_ID;
    
    /* The postSent flag is used to make sure only one post is sent at a time.
     * Only modify this from the Event Dispatch thread. */
    private boolean postSent = false;
    
    private static final int UPDATE_DELAY = 30; // In seconds
    
    /** Creates new form AdvertiseHostDialog */
    public AdvertiseHostDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        timer = new Timer(UPDATE_DELAY * 1000, new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                if(updateButton.isEnabled() && ! postSent) {
                    postUpdateGame(true);
                }
            }
        });
        timer.start();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        ruleSetField = new javax.swing.JTextField();
        ruleSetLabel = new javax.swing.JLabel();
        displayAdvertisementCheckbox = new javax.swing.JCheckBox();
        mapLabel = new javax.swing.JLabel();
        mapField = new javax.swing.JTextField();
        maxPlayersLabel = new javax.swing.JLabel();
        maxPlayersField = new javax.swing.JTextField();
        descriptionLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        updateButton = new javax.swing.JButton();
        jTextArea2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Server Listing");
        setResizable(false);
        ruleSetField.setText("Invade Earth A.D. 2210");

        ruleSetLabel.setText("Rule set");

        displayAdvertisementCheckbox.setText("Display advertisement on global server");
        displayAdvertisementCheckbox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        displayAdvertisementCheckbox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        displayAdvertisementCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayAdvertisementCheckboxActionPerformed(evt);
            }
        });

        mapLabel.setText("Map");

        mapField.setText("Standard world map");

        maxPlayersLabel.setText("Maximum players");

        maxPlayersField.setText("5");

        descriptionLabel.setText("Description:");

        descriptionTextArea.setColumns(20);
        descriptionTextArea.setFont(new java.awt.Font("Dialog", 0, 12));
        descriptionTextArea.setLineWrap(true);
        descriptionTextArea.setRows(3);
        descriptionTextArea.setText("All players are welcome.");
        jScrollPane1.setViewportView(descriptionTextArea);

        updateButton.setText("Update");
        updateButton.setEnabled(false);
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setEditable(false);
        jTextArea2.setFont(new java.awt.Font("Dialog", 0, 12));
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jTextArea2.setText("Use the fields to describe the game you wish to host.  Then check the box below to list your server.  When you are ready to play, uncheck the box to remove the advertisement.  If you plan to start a new game, you may list your server again.");
        jTextArea2.setWrapStyleWord(true);
        jTextArea2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTextArea2.setFocusable(false);
        jTextArea2.setOpaque(false);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, displayAdvertisementCheckbox)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, descriptionLabel))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 59, Short.MAX_VALUE)
                                .add(updateButton))
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                            .add(jTextArea2)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(ruleSetLabel)
                                    .add(mapLabel))
                                .add(76, 76, 76)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(maxPlayersField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(mapField)
                                    .add(ruleSetField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 137, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 77, Short.MAX_VALUE)))
                        .addContainerGap())
                    .add(maxPlayersLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 94, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jTextArea2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ruleSetLabel)
                    .add(ruleSetField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(mapLabel)
                    .add(mapField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(maxPlayersLabel)
                    .add(maxPlayersField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(descriptionLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(displayAdvertisementCheckbox)
                    .add(updateButton))
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        disableButtons();
        postUpdateGame(true);
    }//GEN-LAST:event_updateButtonActionPerformed
    
    private void displayAdvertisementCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayAdvertisementCheckboxActionPerformed
        disableButtons();
        if( displayAdvertisementCheckbox.isSelected() ) {
            postNewGame();
        } else {
            postRemoveGame(true);
        }
    }//GEN-LAST:event_displayAdvertisementCheckboxActionPerformed
    
    public void disableButtons() {
        displayAdvertisementCheckbox.setEnabled(false);
        updateButton.setEnabled(false);
    }
    
    public void updateButtons() {
        displayAdvertisementCheckbox.setEnabled(true);
        updateButton.setEnabled(haveListingID());
        if( ! haveListingID() ) {
            displayAdvertisementCheckbox.setSelected(false);
        }
    }
    
    public boolean haveListingID() {
        return listingID != null && listingID.compareTo(BigInteger.ZERO) > 0;
    }
    
    
    /* The post operations are not executed on the Event Dispatch thread, so
     * they will not freeze the GUI.  Disabling buttons before invoking
     * post...() is optional, since the postSent flag will ensure only one
     * post is sent at a time.  When the post is complete,
     * the post...() method will enable the buttons appropriately (in a thread-
     * safe way) on the Event Dispatch thread. */
    
    public void postNewGame() {
        postSent = true;
        new Thread("Post new game") {
            public void run() {
                listingID = ServerListHandler.postNewGame(server.getPort(), ruleSetField.getText(), mapField.getText(),
                        maxPlayersField.getText(), descriptionTextArea.getText());
                java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        checkForError();
                        postSent = false;
                        updateButtons();
                    }
                });
            }
        }.start();
    }
    
    public void postUpdateGame(final boolean displayErrorMessages) {
        if( haveListingID() ) {
            postSent = true;
            new Thread("Post update game") {
                public void run() {
                    listingID = ServerListHandler.postUpdateGame(listingID, server.getPort(),
                            ruleSetField.getText(), mapField.getText(),
                            maxPlayersField.getText(), descriptionTextArea.getText());
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            if( displayErrorMessages ) {
                                checkForError();
                            }
                            postSent = false;
                            updateButtons();
                        }
                    });
                }
            }.start();
        }
    }
    
    public void postRemoveGame(final boolean displayErrorMessages) {
        if( haveListingID() ) {
            postSent = true;
            new Thread("Post remove game") {
                public void run() {
                    removeGameOnCurrentThread(displayErrorMessages);
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                            postSent = false;
                        }
                    });
                }
            }.start();
        }
    }
    
    // Use this if we need to force the game removal without starting a new thread
    public void removeGameOnCurrentThread(final boolean displayErrorMessages) {        
        if( haveListingID() ) {
            listingID = ServerListHandler.postRemoveGame(listingID);            
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    if( displayErrorMessages ) {
                        checkForError();
                    }
                    listingID = UNKNOWN_ID;
                    updateButtons();
                }
            });
        }
    }
    
    public void checkForError() {
        if( listingID == null ) {
            JOptionPane.showMessageDialog(this, "Unknown error with server list (null)",
                    "Error", JOptionPane.ERROR_MESSAGE);
        } else if( listingID.equals(UKNOWN_ERROR) ) {
            JOptionPane.showMessageDialog(this, "Unknown error with server list",
                    "Error", JOptionPane.ERROR_MESSAGE);
        } else if( listingID.equals(WRONG_IP) ) {
            JOptionPane.showMessageDialog(this, "You may not modify that game from your IP address",
                    "Error", JOptionPane.ERROR_MESSAGE);
        } else if( listingID.equals(UNKNOWN_ID) ) {
            JOptionPane.showMessageDialog(this, "The game you are attempting to modify is not listed on the server",
                    "Error", JOptionPane.ERROR_MESSAGE);
        } else if( listingID.equals(MALFORMED_POST) ) {
            JOptionPane.showMessageDialog(this, "Internal error posting data",
                    "Error", JOptionPane.ERROR_MESSAGE);
        } else if( listingID.equals(REJECTED_IP) ) {
            JOptionPane.showMessageDialog(this, "Too many games have been created from this IP address, please try later",
                    "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            return;
        }
        // There was an error
        listingID = null;
    }
    
    public Server getServer() {
        return server;
    }
    
    public void setServer(Server server) {
        this.server = server;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JCheckBox displayAdvertisementCheckbox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField mapField;
    private javax.swing.JLabel mapLabel;
    private javax.swing.JTextField maxPlayersField;
    private javax.swing.JLabel maxPlayersLabel;
    private javax.swing.JTextField ruleSetField;
    private javax.swing.JLabel ruleSetLabel;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
    
}
