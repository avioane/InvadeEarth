/*
 * GameOverDialog.java
 *
 * Created on July 20, 2005, 12:47 PM
 */

package org.invade;

import java.awt.Dimension;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import org.invade.rules.GodstormRules;

/**
 *
 * @author  jcrosm
 */
public class GameOverDialog extends javax.swing.JDialog {
    
    
    private static final int TOTAL_POINTS_COLUMN = 4;
    private static final int ENERGY_COLUMN = 5;
    private static final int UNITS_COLUMN = 6;
    
    /** Creates new form GameOverDialog */
    public GameOverDialog(java.awt.Frame parent, Board board) {
        super(parent);
        initComponents();
        
        resultsTable.getColumnModel().getColumn(0).setPreferredWidth(128);
        
        List<Object[]> rows = new ArrayList<Object[]>();
        
        for(Player player : board.getPlayers()) {
            int territories = board.getTerritoriesOwned(player).size()
            - board.getTerritoriesOwned(player, TerritoryType.UNDERWORLD).size()
            + board.getUnitCount(player, GodstormRules.ALTAR)
            + board.getUnitCount(player, GodstormRules.CRYPT);
            int continents = CommonBoardMethods.getContinentBonuses(board, player);
            int bonus = player.getBonusPoints();
            int totalPoints = territories + continents + bonus;
            int energy = player.getEnergy();
            int units = CommonBoardMethods.getMobileUnitCount(board, player);
            Object row[] = new Object[] { player, territories, continents,
                    bonus, totalPoints, energy, units
            };
            rows.add(row);
        }
        
        Collections.sort(rows, Collections.reverseOrder(new RowComparator(UNITS_COLUMN)));
        Collections.sort(rows, Collections.reverseOrder(new RowComparator(ENERGY_COLUMN)));
        Collections.sort(rows, Collections.reverseOrder(new RowComparator(TOTAL_POINTS_COLUMN)));
        
        DefaultTableModel model = (DefaultTableModel)resultsTable.getModel();
        for( Object[] row : rows ) {
            model.addRow(row);
        }
        
        int lastWinner = 0;
        while( (lastWinner < rows.size())
        && rows.get(0)[TOTAL_POINTS_COLUMN] == rows.get(lastWinner)[TOTAL_POINTS_COLUMN]
                && rows.get(0)[ENERGY_COLUMN] == rows.get(lastWinner)[ENERGY_COLUMN]
                && rows.get(0)[UNITS_COLUMN] == rows.get(lastWinner)[UNITS_COLUMN]) {
            ++lastWinner;
        }
        --lastWinner;
        
        if( lastWinner == 0 ) {
            winnerLabel.setText("Winner:  " + rows.get(0)[0] );
        } else {
            String winnerText = "Tie:  " + rows.get(0)[0].toString();
            for( int i = 1; i <= lastWinner; ++i ) {
                winnerText += ", " + rows.get(i)[0];
            }
            winnerLabel.setText(winnerText);
        }
        
        String currencyName = board.getRules().getCurrencyName();
        if( currencyName == null ) {
            resultsTable.getColumnModel().removeColumn(resultsTable.getColumnModel().getColumn(ENERGY_COLUMN));
        } else {
            resultsTable.getColumnModel().getColumn(ENERGY_COLUMN).setHeaderValue(currencyName);
        }
        
        Dimension size = new Dimension(resultsTable.getPreferredSize());
        size.width += 4;
        size.height += 24;
        jScrollPane.setPreferredSize(size);
        pack();
        
        WindowCenteringUtility.center(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        winnerPanel = new javax.swing.JPanel();
        dismissButton = new javax.swing.JButton();
        winnerLabel = new javax.swing.JLabel();

        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Results");
        setModal(true);
        jScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Player", "Territories", "Continents", "Bonus", "Total Points", "Energy", "Units"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultsTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        resultsTable.setFocusable(false);
        resultsTable.setRowSelectionAllowed(false);
        jScrollPane.setViewportView(resultsTable);

        getContentPane().add(jScrollPane);

        winnerPanel.setLayout(new java.awt.GridBagLayout());

        winnerPanel.setMaximumSize(new java.awt.Dimension(2147483647, 32));
        winnerPanel.setMinimumSize(new java.awt.Dimension(125, 32));
        winnerPanel.setPreferredSize(new java.awt.Dimension(125, 32));
        dismissButton.setText("Dismiss");
        dismissButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dismissButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 8);
        winnerPanel.add(dismissButton, gridBagConstraints);

        winnerLabel.setText("Winner");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 8, 4, 4);
        winnerPanel.add(winnerLabel, gridBagConstraints);

        getContentPane().add(winnerPanel);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents
    
    private void dismissButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dismissButtonActionPerformed
        dispose();
    }//GEN-LAST:event_dismissButtonActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton dismissButton;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JTable resultsTable;
    private javax.swing.JLabel winnerLabel;
    private javax.swing.JPanel winnerPanel;
    // End of variables declaration//GEN-END:variables
    
}

class RowComparator implements Comparator<Object[]> {
    private int column;
    public RowComparator(int column) {
        this.column = column;
    }
    public int compare(Object first[], Object second[]) {
        return (Integer)first[column] - (Integer)second[column];
    }
}