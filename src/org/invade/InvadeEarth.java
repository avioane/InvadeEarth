/*
 * InvadeEarth.java
 *
 * Created on June 20, 2005, 12:26 PM
 */

package org.invade;

import com.retrogui.dualrpc.client.NotConnectedException;
import com.retrogui.dualrpc.common.CallException;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.lang.reflect.InvocationTargetException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.List;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.KeyStroke;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import org.invade.agents.RandomAgent;
import org.jdom.Document;
import org.invade.agents.LocalHumanAgent;
import org.invade.agents.ReplayAgent;
import org.invade.resources.ResourceAnchor;
import org.invade.gameserver.Client;

/**
 *
 * @author  jcrosm
 */
public class InvadeEarth extends javax.swing.JFrame
        implements BoardMessageListener, NetworkMessageListener, HasClient,
        HasGameThread, GameLoader, PrivateChatDialogListener,
        ConnectionListener {
    
    public static final String VERSION = "3.0.3";
    
    private GameThread gameThread;
    private BackgroundEventThread networkMessageThread;
    
    private Territory selectedTerritory = null;
    private Territory selectedTerritory2 = null;
    private JFileChooser fileChooser = new JFileChooser();
    private PlayersDialog playersDialog = new PlayersDialog(this);
    private Document originalBoardState = null;
    private Client client = null;
    
    private boolean pauseAgents = false;
    private Timer agentTimer;
    private Timer connectedPlayerTimer;
    private int delay = 0;
    private int battleResultsDelay = 500;
    private boolean agentMovePlaced = false;
    private boolean networkMovePlaced = false;
    
    private List<String> movebuffer = new ArrayList();
    private List<PrivateChatDialog> privateChatDialogs = new ArrayList();
    
    private GameHistoryDebugDialog debugDialog = new GameHistoryDebugDialog(this, this);
    
    // If we load a default map, we shouldn't have to send it over the
    // network because everyone already has it
    private String loadedDefaultMapPath = null;
    
    public InvadeEarth() {
        initComponents();
        
        GameThread.setErrorMessageParent(this);
        
        initializeNewGameMenus();
        
        networkMessageThread = new BackgroundEventThread();
        networkMessageThread.start();
        initializeAgentTimer();
        
        jMenuBar.add(new ViewMenu(this, mapCanvas));
        jMenuBar.add(new HelpMenu(this));
        mapCanvas.addMouseListener(new ClickListener());
        updateDisplay();
        
        //set a timer to fire to update the updateConnectedPlayerTextPane()
        connectedPlayerTimer = new Timer(15000, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if( isConnected() ) {
                    updateConnectedPlayerListBox();
                }
            }
        });
        connectedPlayerTimer.start();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSplitPane1 = new javax.swing.JSplitPane();
        mainPanel = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane = new javax.swing.JScrollPane();
        mapCanvasPanel = new javax.swing.JPanel();
        mapCanvas = new org.invade.MapCanvas();
        messagePanel = new javax.swing.JPanel();
        messageScrollPane = new javax.swing.JScrollPane();
        messageTextArea = new javax.swing.JTextArea();
        messagePrefixField = new javax.swing.JTextField();
        messageTextField = new javax.swing.JTextField();
        sendMessageButton = new javax.swing.JButton();
        clearTextAreaButton = new javax.swing.JButton();
        refreshConnected = new javax.swing.JButton();
        connectedPlayerListBoxPane = new javax.swing.JScrollPane();
        connectedPlayerListBox = new javax.swing.JList();
        lobbyLabel = new javax.swing.JLabel();
        multiPanel = new javax.swing.JPanel();
        globalPanel = new javax.swing.JPanel();
        yearLabel = new javax.swing.JLabel();
        playerPanel = new org.invade.PlayerPanel();
        tabbedPane = new javax.swing.JTabbedPane();
        gamePanel = new javax.swing.JPanel();
        bidTurnOrderPanel = new javax.swing.JPanel();
        bidLabel = new javax.swing.JLabel();
        bidScrollPane = new javax.swing.JScrollPane();
        bidPlayerList = new javax.swing.JList();
        bidField = new javax.swing.JPasswordField();
        acceptBidButton = new javax.swing.JButton();
        chooseTurnOrderPanel = new javax.swing.JPanel();
        chooseTurnLabel = new javax.swing.JLabel();
        chooseTurnScrollPane = new javax.swing.JScrollPane();
        chooseTurnPlayerList = new javax.swing.JList();
        acceptTurnChoiceButton = new javax.swing.JButton();
        chooseTurnComboBox = new javax.swing.JComboBox();
        placeReinforcementsPanel = new javax.swing.JPanel();
        reinforcementsPanel = new org.invade.ForcePanel();
        declareMovesPanel = new javax.swing.JPanel();
        endMoves = new javax.swing.JButton();
        acknowledgePanel = new javax.swing.JPanel();
        acknowledgeButton = new javax.swing.JButton();
        chooseForcePanel = new javax.swing.JPanel();
        forcePanel = new org.invade.ForcePanel();
        acceptForceButton = new javax.swing.JButton();
        battleResultsPanel = new javax.swing.JPanel();
        attackerPanel = new javax.swing.JPanel();
        attackerDicePanel = new org.invade.DicePanel();
        defenderPanel = new javax.swing.JPanel();
        defenderDicePanel = new org.invade.DicePanel();
        dismissButton = new javax.swing.JButton();
        buyUnitsPanel = new javax.swing.JPanel();
        buyUnitComboBox = new javax.swing.JComboBox();
        buyUnitButton = new javax.swing.JButton();
        doneBuyingUnitsButton = new javax.swing.JButton();
        purchasedForcePanel = new org.invade.ForcePanel();
        blankPanel = new javax.swing.JPanel();
        drawCardPanel = new javax.swing.JPanel();
        drawCardButton = new javax.swing.JButton();
        doneDrawingCardsButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        decksList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        choosePlayerPanel = new javax.swing.JPanel();
        choosePlayerComboBox = new javax.swing.JComboBox();
        acceptPlayerButton = new javax.swing.JButton();
        gameOverPanel = new javax.swing.JPanel();
        gameOverLabel = new javax.swing.JLabel();
        viewResultsButton = new javax.swing.JButton();
        waitingPanel = new javax.swing.JPanel();
        waitingLabel = new javax.swing.JLabel();
        yesNoPanel = new javax.swing.JPanel();
        yesButton = new javax.swing.JButton();
        noButton = new javax.swing.JButton();
        cardsPanel = new javax.swing.JPanel();
        playerCardsComboBox = new javax.swing.JComboBox();
        cardsScrollPane = new javax.swing.JScrollPane();
        cardsList = new javax.swing.JList();
        playCardButton = new javax.swing.JButton();
        viewActiveCardsButton = new javax.swing.JButton();
        decksButton = new javax.swing.JButton();
        viewCardButton = new javax.swing.JButton();
        playerInfoPanel = new javax.swing.JPanel();
        playerInfoScrollPane = new javax.swing.JScrollPane();
        playerInfoTextPane = new javax.swing.JTextPane();
        jMenuBar = new javax.swing.JMenuBar();
        gameMenu = new javax.swing.JMenu();
        newMenu = new javax.swing.JMenu();
        newCustomMenu = new javax.swing.JMenu();
        loadGame = new javax.swing.JMenuItem();
        replayGame = new javax.swing.JMenuItem();
        saveGame = new javax.swing.JMenuItem();
        saveAsGame = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        connectItem = new javax.swing.JMenuItem();
        disconnectItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        exit = new javax.swing.JMenuItem();
        agentMenu = new javax.swing.JMenu();
        pauseItem = new javax.swing.JCheckBoxMenuItem();
        setDelay = new javax.swing.JMenuItem();
        setBattleResultsDelay = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        assumeAI = new javax.swing.JMenuItem();
        assumeCurrent = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        soundsItem = new javax.swing.JCheckBoxMenuItem();
        debugHistoryItem = new javax.swing.JMenuItem();
        showWarningsItem = new javax.swing.JCheckBoxMenuItem();
        automateMenu = new javax.swing.JMenu();
        useDefaultAttackItem = new javax.swing.JCheckBoxMenuItem();
        useDefaultDefenseItem = new javax.swing.JCheckBoxMenuItem();
        skipDiceItem = new javax.swing.JCheckBoxMenuItem();
        skipAcknowledgeInvasionSelfItem = new javax.swing.JCheckBoxMenuItem();
        skipAcknowledgeInvasionEnemyItem = new javax.swing.JCheckBoxMenuItem();
        skipEndConfirmationItem = new javax.swing.JCheckBoxMenuItem();
        useDefaultBattleLossesItem = new javax.swing.JCheckBoxMenuItem();
        autoEndGameItem = new javax.swing.JCheckBoxMenuItem();

        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.X_AXIS));

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Invade Earth");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jSplitPane1.setResizeWeight(1.0);
        jSplitPane1.setPreferredSize(new java.awt.Dimension(1000, 640));
        mainPanel.setLayout(new javax.swing.BoxLayout(mainPanel, javax.swing.BoxLayout.X_AXIS));

        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setResizeWeight(0.85);
        jScrollPane.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jScrollPane.setPreferredSize(new java.awt.Dimension(848, 640));
        jScrollPane.setRequestFocusEnabled(false);
        mapCanvasPanel.setLayout(new java.awt.GridBagLayout());

        mapCanvasPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                mapCanvasPanelComponentResized(evt);
            }
        });

        mapCanvas.setLayout(new javax.swing.BoxLayout(mapCanvas, javax.swing.BoxLayout.X_AXIS));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        mapCanvasPanel.add(mapCanvas, gridBagConstraints);

        jScrollPane.setViewportView(mapCanvasPanel);

        jSplitPane2.setLeftComponent(jScrollPane);

        messagePanel.setLayout(new java.awt.GridBagLayout());

        messagePanel.setMaximumSize(new java.awt.Dimension(2147483647, 151));
        messagePanel.setPreferredSize(new java.awt.Dimension(132, 151));
        messageTextArea.setEditable(false);
        messageTextArea.setFont(new java.awt.Font("Arial", 0, 14));
        messageTextArea.setLineWrap(true);
        messageTextArea.setRows(5);
        messageTextArea.setWrapStyleWord(true);
        messageScrollPane.setViewportView(messageTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        messagePanel.add(messageScrollPane, gridBagConstraints);

        messagePrefixField.setMinimumSize(new java.awt.Dimension(96, 23));
        messagePrefixField.setPreferredSize(new java.awt.Dimension(96, 23));
        messagePrefixField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messagePrefixFieldActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        messagePanel.add(messagePrefixField, gridBagConstraints);

        messageTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageTextFieldActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        messagePanel.add(messageTextField, gridBagConstraints);

        sendMessageButton.setText("Send");
        sendMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMessageButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        messagePanel.add(sendMessageButton, gridBagConstraints);

        clearTextAreaButton.setText("Clear All");
        clearTextAreaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearTextAreaButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        messagePanel.add(clearTextAreaButton, gridBagConstraints);

        refreshConnected.setText("Refresh");
        refreshConnected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshConnectedActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        messagePanel.add(refreshConnected, gridBagConstraints);

        connectedPlayerListBoxPane.setPreferredSize(new java.awt.Dimension(150, 92));
        connectedPlayerListBox.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        connectedPlayerListBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                connectedPlayerListBoxKeyPressed(evt);
            }
        });
        connectedPlayerListBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                connectedPlayerListBoxMouseClicked(evt);
            }
        });

        connectedPlayerListBoxPane.setViewportView(connectedPlayerListBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        messagePanel.add(connectedPlayerListBoxPane, gridBagConstraints);

        lobbyLabel.setText(" Lobby:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        messagePanel.add(lobbyLabel, gridBagConstraints);

        jSplitPane2.setRightComponent(messagePanel);

        mainPanel.add(jSplitPane2);

        jSplitPane1.setLeftComponent(mainPanel);

        multiPanel.setLayout(new javax.swing.BoxLayout(multiPanel, javax.swing.BoxLayout.Y_AXIS));

        multiPanel.setMaximumSize(new java.awt.Dimension(194, 2147483647));
        multiPanel.setMinimumSize(new java.awt.Dimension(196, 451));
        multiPanel.setPreferredSize(new java.awt.Dimension(194, 638));
        yearLabel.setText("Year");
        globalPanel.add(yearLabel);

        multiPanel.add(globalPanel);

        playerPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(6, 6, 6, 6));
        multiPanel.add(playerPanel);

        tabbedPane.setPreferredSize(new java.awt.Dimension(220, 288));
        gamePanel.setLayout(new java.awt.CardLayout());

        gamePanel.setMinimumSize(new java.awt.Dimension(196, 256));
        gamePanel.setPreferredSize(new java.awt.Dimension(196, 256));
        bidTurnOrderPanel.setLayout(new java.awt.GridBagLayout());

        bidTurnOrderPanel.setName("bidTurnOrderPanel");
        bidLabel.setText("Bid for Turn Order");
        bidLabel.setAlignmentX(0.5F);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        bidTurnOrderPanel.add(bidLabel, gridBagConstraints);

        bidScrollPane.setMinimumSize(new java.awt.Dimension(160, 160));
        bidScrollPane.setPreferredSize(new java.awt.Dimension(160, 160));
        bidPlayerList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        bidScrollPane.setViewportView(bidPlayerList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        bidTurnOrderPanel.add(bidScrollPane, gridBagConstraints);

        bidField.setMinimumSize(new java.awt.Dimension(32, 24));
        bidField.setPreferredSize(new java.awt.Dimension(32, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        bidTurnOrderPanel.add(bidField, gridBagConstraints);

        acceptBidButton.setText("Accept");
        acceptBidButton.setAlignmentX(0.5F);
        acceptBidButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptBidButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        bidTurnOrderPanel.add(acceptBidButton, gridBagConstraints);

        gamePanel.add(bidTurnOrderPanel, "bidTurnOrderPanel");

        chooseTurnOrderPanel.setLayout(new java.awt.GridBagLayout());

        chooseTurnOrderPanel.setName("chooseTurnOrderPanel");
        chooseTurnLabel.setText("Choose Turn Order");
        chooseTurnLabel.setAlignmentX(0.5F);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        chooseTurnOrderPanel.add(chooseTurnLabel, gridBagConstraints);

        chooseTurnScrollPane.setMinimumSize(new java.awt.Dimension(160, 160));
        chooseTurnScrollPane.setPreferredSize(new java.awt.Dimension(160, 160));
        chooseTurnPlayerList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        chooseTurnScrollPane.setViewportView(chooseTurnPlayerList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        chooseTurnOrderPanel.add(chooseTurnScrollPane, gridBagConstraints);

        acceptTurnChoiceButton.setText("Accept");
        acceptTurnChoiceButton.setAlignmentX(0.5F);
        acceptTurnChoiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptTurnChoiceButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        chooseTurnOrderPanel.add(acceptTurnChoiceButton, gridBagConstraints);

        chooseTurnComboBox.setPreferredSize(new java.awt.Dimension(36, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        chooseTurnOrderPanel.add(chooseTurnComboBox, gridBagConstraints);

        gamePanel.add(chooseTurnOrderPanel, "chooseTurnOrderPanel");

        placeReinforcementsPanel.setLayout(new java.awt.GridBagLayout());

        placeReinforcementsPanel.setName("placeReinforcementsPanel");
        reinforcementsPanel.setTitle("Reinforcements");
        placeReinforcementsPanel.add(reinforcementsPanel, new java.awt.GridBagConstraints());

        gamePanel.add(placeReinforcementsPanel, "placeReinforcementsPanel");

        declareMovesPanel.setLayout(new java.awt.GridBagLayout());

        declareMovesPanel.setName("declareMovesPanel");
        endMoves.setText("End Move");
        endMoves.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endMovesActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        declareMovesPanel.add(endMoves, gridBagConstraints);

        gamePanel.add(declareMovesPanel, "declareMovesPanel");

        acknowledgePanel.setLayout(new java.awt.GridBagLayout());

        acknowledgePanel.setName("acknowledgePanel");
        acknowledgeButton.setText("Acknowledge");
        acknowledgeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acknowledgeButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        acknowledgePanel.add(acknowledgeButton, gridBagConstraints);

        gamePanel.add(acknowledgePanel, "acknowledgePanel");

        chooseForcePanel.setLayout(new java.awt.GridBagLayout());

        chooseForcePanel.setName("chooseForcePanel");
        chooseForcePanel.add(forcePanel, new java.awt.GridBagConstraints());

        acceptForceButton.setText("Accept");
        acceptForceButton.setAlignmentX(0.5F);
        acceptForceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptForceButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        chooseForcePanel.add(acceptForceButton, gridBagConstraints);

        gamePanel.add(chooseForcePanel, "chooseForcePanel");

        battleResultsPanel.setLayout(new java.awt.GridBagLayout());

        battleResultsPanel.setName("battleResultsPanel");
        attackerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Attacker"));
        attackerDicePanel.setDiceColor(new java.awt.Color(255, 0, 0));
        attackerDicePanel.setDotColor(new java.awt.Color(255, 255, 255));
        attackerDicePanel.setMaximumSize(new java.awt.Dimension(168, 40));
        attackerDicePanel.setMinimumSize(new java.awt.Dimension(168, 40));
        attackerDicePanel.setPreferredSize(new java.awt.Dimension(168, 40));
        attackerPanel.add(attackerDicePanel);

        battleResultsPanel.add(attackerPanel, new java.awt.GridBagConstraints());

        defenderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Defender"));
        defenderDicePanel.setMaximumSize(new java.awt.Dimension(168, 40));
        defenderDicePanel.setMinimumSize(new java.awt.Dimension(168, 40));
        defenderDicePanel.setPreferredSize(new java.awt.Dimension(168, 40));
        defenderPanel.add(defenderDicePanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        battleResultsPanel.add(defenderPanel, gridBagConstraints);

        dismissButton.setText("Dismiss");
        dismissButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dismissButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        battleResultsPanel.add(dismissButton, gridBagConstraints);

        gamePanel.add(battleResultsPanel, "battleResultsPanel");

        buyUnitsPanel.setLayout(new java.awt.GridBagLayout());

        buyUnitsPanel.setName("buyUnitsPanel");
        buyUnitComboBox.setPreferredSize(new java.awt.Dimension(160, 22));
        buyUnitComboBox.setRenderer(SpecialUnit.RENDERER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        buyUnitsPanel.add(buyUnitComboBox, gridBagConstraints);

        buyUnitButton.setText("Buy");
        buyUnitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyUnitButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        buyUnitsPanel.add(buyUnitButton, gridBagConstraints);

        doneBuyingUnitsButton.setText("Done");
        doneBuyingUnitsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneBuyingUnitsButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        buyUnitsPanel.add(doneBuyingUnitsButton, gridBagConstraints);

        purchasedForcePanel.setTitle("Reinforcements");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        buyUnitsPanel.add(purchasedForcePanel, gridBagConstraints);

        gamePanel.add(buyUnitsPanel, "buyUnitsPanel");

        blankPanel.setName("blankPanel");
        gamePanel.add(blankPanel, "blankPanel");

        drawCardPanel.setLayout(new java.awt.GridBagLayout());

        drawCardPanel.setMinimumSize(new java.awt.Dimension(190, 241));
        drawCardPanel.setName("drawCardPanel");
        drawCardPanel.setPreferredSize(new java.awt.Dimension(190, 241));
        drawCardButton.setText("Draw");
        drawCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawCardButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        drawCardPanel.add(drawCardButton, gridBagConstraints);

        doneDrawingCardsButton.setText("Done");
        doneDrawingCardsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneDrawingCardsButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        drawCardPanel.add(doneDrawingCardsButton, gridBagConstraints);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setInheritsPopupMenu(true);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(180, 70));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(180, 128));
        decksList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        decksList.setCellRenderer(PlayableDeck.RENDERER);
        decksList.setMaximumSize(new java.awt.Dimension(999999999, 999999999));
        decksList.setMinimumSize(new java.awt.Dimension(180, 20));
        decksList.setPreferredSize(new java.awt.Dimension(180, 120));
        decksList.setVerifyInputWhenFocusTarget(false);
        decksList.setVisibleRowCount(6);
        decksList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                decksListKeyPressed(evt);
            }
        });
        decksList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                decksListValueChanged(evt);
            }
        });
        decksList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                decksListMouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(decksList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        drawCardPanel.add(jScrollPane1, gridBagConstraints);

        jLabel1.setText("Cards Remaining:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        drawCardPanel.add(jLabel1, gridBagConstraints);

        gamePanel.add(drawCardPanel, "drawCardPanel");

        choosePlayerPanel.setLayout(new java.awt.GridBagLayout());

        choosePlayerPanel.setName("choosePlayerPanel");
        choosePlayerComboBox.setPreferredSize(new java.awt.Dimension(160, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        choosePlayerPanel.add(choosePlayerComboBox, gridBagConstraints);

        acceptPlayerButton.setText("Accept");
        acceptPlayerButton.setAlignmentX(0.5F);
        acceptPlayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptPlayerButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        choosePlayerPanel.add(acceptPlayerButton, gridBagConstraints);

        gamePanel.add(choosePlayerPanel, "choosePlayerPanel");

        gameOverPanel.setLayout(new java.awt.GridBagLayout());

        gameOverPanel.setName("gameOverPanel");
        gameOverLabel.setText("Game Over");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gameOverPanel.add(gameOverLabel, gridBagConstraints);

        viewResultsButton.setText("View Results");
        viewResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewResultsButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gameOverPanel.add(viewResultsButton, gridBagConstraints);

        gamePanel.add(gameOverPanel, "gameOverPanel");

        waitingPanel.setName("waitingPanel");
        waitingLabel.setText("Waiting for move . . .");
        waitingLabel.setAlignmentX(0.5F);
        waitingPanel.add(waitingLabel);

        gamePanel.add(waitingPanel, "waitingPanel");

        yesNoPanel.setLayout(new java.awt.GridBagLayout());

        yesNoPanel.setName("yesNoPanel");
        yesButton.setText("Yes");
        yesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yesButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        yesNoPanel.add(yesButton, gridBagConstraints);

        noButton.setText("No");
        noButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        yesNoPanel.add(noButton, gridBagConstraints);

        gamePanel.add(yesNoPanel, "yesNoPanel");

        tabbedPane.addTab("Game", gamePanel);

        cardsPanel.setLayout(new java.awt.GridBagLayout());

        cardsPanel.setName("cardsPanel");
        playerCardsComboBox.setMinimumSize(new java.awt.Dimension(160, 22));
        playerCardsComboBox.setPreferredSize(new java.awt.Dimension(160, 22));
        playerCardsComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                playerCardsComboBoxItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        cardsPanel.add(playerCardsComboBox, gridBagConstraints);

        cardsScrollPane.setMinimumSize(new java.awt.Dimension(160, 160));
        cardsScrollPane.setPreferredSize(new java.awt.Dimension(160, 160));
        cardsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        cardsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                cardsListValueChanged(evt);
            }
        });

        cardsScrollPane.setViewportView(cardsList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        cardsPanel.add(cardsScrollPane, gridBagConstraints);

        playCardButton.setText("Play");
        playCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playCardButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        cardsPanel.add(playCardButton, gridBagConstraints);

        viewActiveCardsButton.setText("Active");
        viewActiveCardsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActiveCardsButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        cardsPanel.add(viewActiveCardsButton, gridBagConstraints);

        decksButton.setText("Decks");
        decksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decksButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        cardsPanel.add(decksButton, gridBagConstraints);

        viewCardButton.setText("View");
        viewCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCardButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        cardsPanel.add(viewCardButton, gridBagConstraints);

        tabbedPane.addTab("Cards", cardsPanel);

        multiPanel.add(tabbedPane);

        playerInfoPanel.setLayout(new java.awt.BorderLayout());

        playerInfoPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(6, 6, 6, 6));
        playerInfoPanel.setMaximumSize(new java.awt.Dimension(32781, 32781));
        playerInfoPanel.setMinimumSize(new java.awt.Dimension(172, 96));
        playerInfoPanel.setPreferredSize(new java.awt.Dimension(194, 194));
        playerInfoScrollPane.setMaximumSize(new java.awt.Dimension(194, 32767));
        playerInfoScrollPane.setMinimumSize(new java.awt.Dimension(172, 172));
        playerInfoScrollPane.setPreferredSize(new java.awt.Dimension(194, 194));
        playerInfoTextPane.setEditable(false);
        playerInfoTextPane.setFocusable(false);
        playerInfoScrollPane.setViewportView(playerInfoTextPane);

        playerInfoPanel.add(playerInfoScrollPane, java.awt.BorderLayout.CENTER);

        multiPanel.add(playerInfoPanel);

        jSplitPane1.setRightComponent(multiPanel);

        getContentPane().add(jSplitPane1);

        gameMenu.setText("Game");
        newMenu.setText("New");
        gameMenu.add(newMenu);

        newCustomMenu.setText("New With Custom Rules");
        gameMenu.add(newCustomMenu);

        loadGame.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        loadGame.setText("Load...");
        loadGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadGameActionPerformed(evt);
            }
        });

        gameMenu.add(loadGame);

        replayGame.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        replayGame.setText("Replay...");
        replayGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replayGameActionPerformed(evt);
            }
        });

        gameMenu.add(replayGame);

        saveGame.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveGame.setText("Save");
        saveGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveGameActionPerformed(evt);
            }
        });

        gameMenu.add(saveGame);

        saveAsGame.setText("Save As...");
        saveAsGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsGameActionPerformed(evt);
            }
        });

        gameMenu.add(saveAsGame);

        gameMenu.add(jSeparator1);

        connectItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        connectItem.setText("Connect...");
        connectItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectItemActionPerformed(evt);
            }
        });

        gameMenu.add(connectItem);

        disconnectItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        disconnectItem.setText("Disconnect");
        disconnectItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectItemActionPerformed(evt);
            }
        });

        gameMenu.add(disconnectItem);

        gameMenu.add(jSeparator2);

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        gameMenu.add(exit);

        jMenuBar.add(gameMenu);

        agentMenu.setText("Agents");
        pauseItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        pauseItem.setText("Pause");
        pauseItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseItemActionPerformed(evt);
            }
        });

        agentMenu.add(pauseItem);

        setDelay.setText("Set Delay...");
        setDelay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setDelayActionPerformed(evt);
            }
        });

        agentMenu.add(setDelay);

        setBattleResultsDelay.setText("Set Delay After Battle...");
        setBattleResultsDelay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setBattleResultsDelayActionPerformed(evt);
            }
        });

        agentMenu.add(setBattleResultsDelay);

        agentMenu.add(jSeparator3);

        assumeAI.setText("Assume All AI");
        assumeAI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assumeAIActionPerformed(evt);
            }
        });

        agentMenu.add(assumeAI);

        assumeCurrent.setText("Assume Current Player");
        assumeCurrent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assumeCurrentActionPerformed(evt);
            }
        });

        agentMenu.add(assumeCurrent);

        jMenuBar.add(agentMenu);

        optionsMenu.setText("Options");
        soundsItem.setSelected(true);
        soundsItem.setText("Play Sounds");
        soundsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soundsItemActionPerformed(evt);
            }
        });

        optionsMenu.add(soundsItem);

        debugHistoryItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_BACK_SPACE, java.awt.event.InputEvent.CTRL_MASK));
        debugHistoryItem.setText("History (Debug)");
        debugHistoryItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debugHistoryItemActionPerformed(evt);
            }
        });

        optionsMenu.add(debugHistoryItem);

        showWarningsItem.setSelected(GameThread.isShowWarnings());
        showWarningsItem.setText("Show Warnings (Debug)");
        showWarningsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showWarningsItemActionPerformed(evt);
            }
        });

        optionsMenu.add(showWarningsItem);

        jMenuBar.add(optionsMenu);

        automateMenu.setText("Automate");
        useDefaultAttackItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, java.awt.event.InputEvent.CTRL_MASK));
        useDefaultAttackItem.setText("Use Default Attack Force");
        automateMenu.add(useDefaultAttackItem);

        useDefaultDefenseItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, java.awt.event.InputEvent.CTRL_MASK));
        useDefaultDefenseItem.setSelected(true);
        useDefaultDefenseItem.setText("Use Default Defense Force");
        automateMenu.add(useDefaultDefenseItem);

        skipDiceItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, java.awt.event.InputEvent.CTRL_MASK));
        skipDiceItem.setText("Skip Dice");
        automateMenu.add(skipDiceItem);

        skipAcknowledgeInvasionSelfItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F8, java.awt.event.InputEvent.CTRL_MASK));
        skipAcknowledgeInvasionSelfItem.setText("Skip Invasion Acknowledgement (Self)");
        automateMenu.add(skipAcknowledgeInvasionSelfItem);

        skipAcknowledgeInvasionEnemyItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, java.awt.event.InputEvent.CTRL_MASK));
        skipAcknowledgeInvasionEnemyItem.setSelected(true);
        skipAcknowledgeInvasionEnemyItem.setText("Skip Invasion Acknowledgement (Opponents)");
        automateMenu.add(skipAcknowledgeInvasionEnemyItem);

        skipEndConfirmationItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F10, java.awt.event.InputEvent.CTRL_MASK));
        skipEndConfirmationItem.setText("Skip Confirmation");
        automateMenu.add(skipEndConfirmationItem);

        useDefaultBattleLossesItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F11, java.awt.event.InputEvent.CTRL_MASK));
        useDefaultBattleLossesItem.setSelected(true);
        useDefaultBattleLossesItem.setText("Use Default Battle Losses");
        automateMenu.add(useDefaultBattleLossesItem);

        autoEndGameItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, java.awt.event.InputEvent.CTRL_MASK));
        autoEndGameItem.setSelected(true);
        autoEndGameItem.setText("Play All Cards at Game End");
        automateMenu.add(autoEndGameItem);

        jMenuBar.add(automateMenu);

        setJMenuBar(jMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents
        
    private void noButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noButtonActionPerformed
        put(SpecialMove.NO);
    }//GEN-LAST:event_noButtonActionPerformed
    
    private void yesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yesButtonActionPerformed
        put(SpecialMove.YES);
    }//GEN-LAST:event_yesButtonActionPerformed
    
    private void connectedPlayerListBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_connectedPlayerListBoxKeyPressed
        if(evt.getKeyCode()==evt.VK_ENTER) {
            if(isConnected() && connectedPlayerListBox.getSelectedValue() != null) {
                String listvalue = connectedPlayerListBox.getSelectedValue().toString().trim();
                handleNewPrivateChatDialog(listvalue);
            }
            evt.consume();
        }
    }//GEN-LAST:event_connectedPlayerListBoxKeyPressed
    
    private void connectedPlayerListBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_connectedPlayerListBoxMouseClicked
        if(evt.getButton()==evt.BUTTON1) {
            if(evt.getClickCount()==2) {
                String clickedOn = (String)connectedPlayerListBox.getModel().getElementAt(connectedPlayerListBox.locationToIndex(evt.getPoint()));
                clickedOn = clickedOn.trim();
                if( clickedOn.length() > 0 ) {
                    handleNewPrivateChatDialog(clickedOn);
                    evt.consume();
                }
            }
        }
    }//GEN-LAST:event_connectedPlayerListBoxMouseClicked
    
    private void showWarningsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showWarningsItemActionPerformed
        GameThread.setShowWarnings(showWarningsItem.isSelected());
    }//GEN-LAST:event_showWarningsItemActionPerformed
    
    private void debugHistoryItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debugHistoryItemActionPerformed
        debugDialog.setVisible(true);
        debugDialog.refresh();
    }//GEN-LAST:event_debugHistoryItemActionPerformed
    
    private void refreshConnectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshConnectedActionPerformed
        updateConnectedPlayerListBox();
    }//GEN-LAST:event_refreshConnectedActionPerformed
    
    private void messagePrefixFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messagePrefixFieldActionPerformed
        messageTextField.requestFocusInWindow();
    }//GEN-LAST:event_messagePrefixFieldActionPerformed
    
    private void messageTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageTextFieldActionPerformed
        sendMessageButton.doClick();
    }//GEN-LAST:event_messageTextFieldActionPerformed
    
    private void sendMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMessageButtonActionPerformed
        if( isConnected() ) {
            String message = messagePrefixField.getText() + "> "
                    + messageTextField.getText();
            messageTextField.setText("");
            try {
                client.setName(messagePrefixField.getText());
                client.sendAsynchronizedMessage(XMLHandler.toString(XMLHandler.createMessageDocument(message)));
            } catch (CallException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_sendMessageButtonActionPerformed
    
    private void clearTextAreaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearTextAreaButtonActionPerformed
        messageTextArea.setText("");
    }//GEN-LAST:event_clearTextAreaButtonActionPerformed
    
    private void decksListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_decksListValueChanged
        PlayableDeck deck = (PlayableDeck)decksList.getSelectedValue();
        if(deck != null && deck.isDeckDisabled()) {
            if(decksList.getSelectedIndex() != evt.getFirstIndex()) {
                decksList.setSelectedIndex(evt.getFirstIndex());
            } else if(decksList.getSelectedIndex() != evt.getLastIndex()) {
                decksList.setSelectedIndex(evt.getLastIndex());
            }
        }
    }//GEN-LAST:event_decksListValueChanged
    
    private void decksListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_decksListMouseClicked
        if(evt.getButton()==evt.BUTTON1) {
            if(evt.getClickCount()==2) {
                PlayableDeck clickedOn = (PlayableDeck)decksList.getModel().getElementAt(decksList.locationToIndex(evt.getPoint()));
                if( ! clickedOn.isDeckDisabled() ) {
                    put(clickedOn);
                    evt.consume();
                }
            }
        }
    }//GEN-LAST:event_decksListMouseClicked
    
    private void decksListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_decksListKeyPressed
        if(evt.getKeyCode()==evt.VK_ENTER) {
            if(decksList.getSelectedValue() != null) {
                put((PlayableDeck)decksList.getSelectedValue());
            }
            evt.consume();
        }else if(evt.getKeyCode()==evt.VK_UP) {
            // TODO, select next buyable/drawable deck in the list
        }else if(evt.getKeyCode()==evt.VK_DOWN) {
            // TODO, select previous buyable/drawable deck in the list
        }
    }//GEN-LAST:event_decksListKeyPressed
    
    private void soundsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soundsItemActionPerformed
        SoundDriver.setSoundEnabled(soundsItem.isSelected());
    }//GEN-LAST:event_soundsItemActionPerformed
    
    private void assumeCurrentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assumeCurrentActionPerformed
        if( getBoard() != null && getBoard().getCurrentPlayer() != null
                && getBoard().getCurrentPlayer().getAgent().isAI() ) {
            getBoard().getCurrentPlayer().setAgent(new LocalHumanAgent());
            updateDisplay();
        }
    }//GEN-LAST:event_assumeCurrentActionPerformed
    
    private void assumeAIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assumeAIActionPerformed
        if( getBoard() != null ) {
            for( Player player : getBoard().getPlayers() ) {
                if( player.getAgent().isAI() ) {
                    player.setAgent(new LocalHumanAgent());
                }
            }
            updateDisplay();
        }
    }//GEN-LAST:event_assumeAIActionPerformed
    
    private void replayGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replayGameActionPerformed
        if( isConnected() ) {
            JOptionPane.showMessageDialog(InvadeEarth.this, "Replay over "
                    + "network not supported; please disconnect", "Sorry!",
                    JOptionPane.ERROR_MESSAGE);
        } else if( mapCanvas.getBoard() == null
                || JOptionPane.showConfirmDialog(InvadeEarth.this, "Clear game?",
                "Confirm", JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE ) == JOptionPane.YES_OPTION ) {
            openFile(false, false, true, null);
        }
    }//GEN-LAST:event_replayGameActionPerformed
    
    private void setBattleResultsDelayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setBattleResultsDelayActionPerformed
        battleResultsDelay = AgentDelayDialog.showDialog(this, (int)battleResultsDelay);
    }//GEN-LAST:event_setBattleResultsDelayActionPerformed
    
    private void setDelayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setDelayActionPerformed
        delay = AgentDelayDialog.showDialog(this, (int)delay);
    }//GEN-LAST:event_setDelayActionPerformed
    
    private void pauseItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseItemActionPerformed
        pauseAgents = pauseItem.isSelected();
        updateDisplay();
    }//GEN-LAST:event_pauseItemActionPerformed
    
    private void mapCanvasPanelComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_mapCanvasPanelComponentResized
        mapCanvas.updateSize();
    }//GEN-LAST:event_mapCanvasPanelComponentResized
    
    private void viewCardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCardButtonActionPerformed
        if( ((Player)playerCardsComboBox.getSelectedItem())
        == getBoard().getCurrentPlayer() ) {
            Card card = (Card)cardsList.getSelectedValue();
            card.displayCard(this, mapCanvas);
        }
    }//GEN-LAST:event_viewCardButtonActionPerformed
    
    private void disconnectItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectItemActionPerformed
        if( isConnected() ) {
            confirmDisconnect();
        }
    }//GEN-LAST:event_disconnectItemActionPerformed
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        confirmExit();
    }//GEN-LAST:event_formWindowClosing
    
    private void connectItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectItemActionPerformed
        new ConnectDialog(this, this, this).setVisible(true);
    }//GEN-LAST:event_connectItemActionPerformed
    
    private void cardsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_cardsListValueChanged
        updateCardButtonState();
    }//GEN-LAST:event_cardsListValueChanged
    
    private void decksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decksButtonActionPerformed
        String deckList = "";
        for( PlayableDeck deck : getBoard().getDecks() ) {
            deckList += deck.getName() + ":  " + deck.getCards().size() + "\n";
        }
        if( getBoard().getDecks().isEmpty() ) {
            deckList = "No decks are used under the current rules";
        }
        JOptionPane.showMessageDialog(this, deckList,
                "Decks", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_decksButtonActionPerformed
    
    private void viewResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewResultsButtonActionPerformed
        new GameOverDialog(this, getBoard()).setVisible(true);
    }//GEN-LAST:event_viewResultsButtonActionPerformed
    
    private void acceptPlayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptPlayerButtonActionPerformed
        put((Player)choosePlayerComboBox.getSelectedItem());
    }//GEN-LAST:event_acceptPlayerButtonActionPerformed
    
    private void viewActiveCardsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActiveCardsButtonActionPerformed
        new ActiveCardDisplay(this, getBoard(), mapCanvas).setVisible(true);
    }//GEN-LAST:event_viewActiveCardsButtonActionPerformed
    
    private void loadGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadGameActionPerformed
        if( mapCanvas.getBoard() == null
                || JOptionPane.showConfirmDialog(InvadeEarth.this, "Clear game?",
                "Confirm", JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE ) == JOptionPane.YES_OPTION ) {
            openFile(false, false, false, null);
        }
    }//GEN-LAST:event_loadGameActionPerformed
    
    private void saveGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveGameActionPerformed
        save();
    }//GEN-LAST:event_saveGameActionPerformed
    
    private void saveAsGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsGameActionPerformed
        saveAs();
    }//GEN-LAST:event_saveAsGameActionPerformed
    
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        confirmExit();
    }//GEN-LAST:event_exitActionPerformed
    
    private void doneDrawingCardsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneDrawingCardsButtonActionPerformed
        put(SpecialMove.END_MOVE);
    }//GEN-LAST:event_doneDrawingCardsButtonActionPerformed
    
    private void drawCardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawCardButtonActionPerformed
        if( decksList.getSelectedValue() != null ) {
            put((PlayableDeck)decksList.getSelectedValue());
            decksList.requestFocusInWindow();
        }
    }//GEN-LAST:event_drawCardButtonActionPerformed
    
    private void playerCardsComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_playerCardsComboBoxItemStateChanged
        updateCardsDisplay();
    }//GEN-LAST:event_playerCardsComboBoxItemStateChanged
    
    private void playCardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playCardButtonActionPerformed
        if( ((Player)playerCardsComboBox.getSelectedItem())
        == getBoard().getCurrentPlayer() ) {
            Card card = (Card)cardsList.getSelectedValue();
            put(card);
            if( tabbedPane.indexOfComponent(gamePanel) != -1 ) {
                tabbedPane.setSelectedComponent(gamePanel);
            }
            updateDisplay();
        }
    }//GEN-LAST:event_playCardButtonActionPerformed
    
    private void doneBuyingUnitsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneBuyingUnitsButtonActionPerformed
        put(SpecialMove.END_MOVE);
    }//GEN-LAST:event_doneBuyingUnitsButtonActionPerformed
    
    private void buyUnitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyUnitButtonActionPerformed
        SpecialUnit special = (SpecialUnit)buyUnitComboBox.getSelectedItem();
        if( getBoard().getMoveVerifier().isLegal(getBoard(), special) ) {
            SoundDriver.play("buyitem.wav");
        }
        put(special);
    }//GEN-LAST:event_buyUnitButtonActionPerformed
    
    private void dismissButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dismissButtonActionPerformed
        put(SpecialMove.ACKNOWLEDGE);
    }//GEN-LAST:event_dismissButtonActionPerformed
    
    private void acceptForceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptForceButtonActionPerformed
        put( forcePanel.getSelected() );
    }//GEN-LAST:event_acceptForceButtonActionPerformed
    
    private void acknowledgeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acknowledgeButtonActionPerformed
        put(SpecialMove.ACKNOWLEDGE);
    }//GEN-LAST:event_acknowledgeButtonActionPerformed
    
    private void endMovesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endMovesActionPerformed
        if( skipEndConfirmationItem.isSelected() ||
                (JOptionPane.showConfirmDialog(this, "Are you sure?",
                endMoves.getText(), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)
                == JOptionPane.YES_OPTION) ) {
            put(SpecialMove.END_MOVE);
        }
    }//GEN-LAST:event_endMovesActionPerformed
    
    private void acceptTurnChoiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptTurnChoiceButtonActionPerformed
        Integer choice = (Integer)chooseTurnComboBox.getSelectedItem();
        put(choice);
    }//GEN-LAST:event_acceptTurnChoiceButtonActionPerformed
    
    private void acceptBidButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptBidButtonActionPerformed
        try {
            int bid = Integer.parseInt(new String(bidField.getPassword()));
            bidField.setText("");
            put(bid);
            return;
        } catch(NumberFormatException e) {}
        JOptionPane.showMessageDialog(this, "Invalid bid", "Error", JOptionPane.ERROR_MESSAGE);
        bidField.setEnabled(true);
        acceptBidButton.setEnabled(true);
    }//GEN-LAST:event_acceptBidButtonActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            // If we did not load system look and feel, ignore error and continue
        } catch(Exception e){}
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InvadeEarth().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptBidButton;
    private javax.swing.JButton acceptForceButton;
    private javax.swing.JButton acceptPlayerButton;
    private javax.swing.JButton acceptTurnChoiceButton;
    private javax.swing.JButton acknowledgeButton;
    private javax.swing.JPanel acknowledgePanel;
    private javax.swing.JMenu agentMenu;
    private javax.swing.JMenuItem assumeAI;
    private javax.swing.JMenuItem assumeCurrent;
    private org.invade.DicePanel attackerDicePanel;
    private javax.swing.JPanel attackerPanel;
    private javax.swing.JCheckBoxMenuItem autoEndGameItem;
    private javax.swing.JMenu automateMenu;
    private javax.swing.JPanel battleResultsPanel;
    private javax.swing.JPasswordField bidField;
    private javax.swing.JLabel bidLabel;
    private javax.swing.JList bidPlayerList;
    private javax.swing.JScrollPane bidScrollPane;
    private javax.swing.JPanel bidTurnOrderPanel;
    private javax.swing.JPanel blankPanel;
    private javax.swing.JButton buyUnitButton;
    private javax.swing.JComboBox buyUnitComboBox;
    private javax.swing.JPanel buyUnitsPanel;
    private javax.swing.JList cardsList;
    private javax.swing.JPanel cardsPanel;
    private javax.swing.JScrollPane cardsScrollPane;
    private javax.swing.JPanel chooseForcePanel;
    private javax.swing.JComboBox choosePlayerComboBox;
    private javax.swing.JPanel choosePlayerPanel;
    private javax.swing.JComboBox chooseTurnComboBox;
    private javax.swing.JLabel chooseTurnLabel;
    private javax.swing.JPanel chooseTurnOrderPanel;
    private javax.swing.JList chooseTurnPlayerList;
    private javax.swing.JScrollPane chooseTurnScrollPane;
    private javax.swing.JButton clearTextAreaButton;
    private javax.swing.JMenuItem connectItem;
    private javax.swing.JList connectedPlayerListBox;
    private javax.swing.JScrollPane connectedPlayerListBoxPane;
    private javax.swing.JMenuItem debugHistoryItem;
    private javax.swing.JButton decksButton;
    private javax.swing.JList decksList;
    private javax.swing.JPanel declareMovesPanel;
    private org.invade.DicePanel defenderDicePanel;
    private javax.swing.JPanel defenderPanel;
    private javax.swing.JMenuItem disconnectItem;
    private javax.swing.JButton dismissButton;
    private javax.swing.JButton doneBuyingUnitsButton;
    private javax.swing.JButton doneDrawingCardsButton;
    private javax.swing.JButton drawCardButton;
    private javax.swing.JPanel drawCardPanel;
    private javax.swing.JButton endMoves;
    private javax.swing.JMenuItem exit;
    private org.invade.ForcePanel forcePanel;
    private javax.swing.JMenu gameMenu;
    private javax.swing.JLabel gameOverLabel;
    private javax.swing.JPanel gameOverPanel;
    private javax.swing.JPanel gamePanel;
    private javax.swing.JPanel globalPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JMenuItem loadGame;
    private javax.swing.JLabel lobbyLabel;
    private javax.swing.JPanel mainPanel;
    private org.invade.MapCanvas mapCanvas;
    private javax.swing.JPanel mapCanvasPanel;
    private javax.swing.JPanel messagePanel;
    private javax.swing.JTextField messagePrefixField;
    private javax.swing.JScrollPane messageScrollPane;
    private javax.swing.JTextArea messageTextArea;
    private javax.swing.JTextField messageTextField;
    private javax.swing.JPanel multiPanel;
    private javax.swing.JMenu newCustomMenu;
    private javax.swing.JMenu newMenu;
    private javax.swing.JButton noButton;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JCheckBoxMenuItem pauseItem;
    private javax.swing.JPanel placeReinforcementsPanel;
    private javax.swing.JButton playCardButton;
    private javax.swing.JComboBox playerCardsComboBox;
    private javax.swing.JPanel playerInfoPanel;
    private javax.swing.JScrollPane playerInfoScrollPane;
    private javax.swing.JTextPane playerInfoTextPane;
    private org.invade.PlayerPanel playerPanel;
    private org.invade.ForcePanel purchasedForcePanel;
    private javax.swing.JButton refreshConnected;
    private org.invade.ForcePanel reinforcementsPanel;
    private javax.swing.JMenuItem replayGame;
    private javax.swing.JMenuItem saveAsGame;
    private javax.swing.JMenuItem saveGame;
    private javax.swing.JButton sendMessageButton;
    private javax.swing.JMenuItem setBattleResultsDelay;
    private javax.swing.JMenuItem setDelay;
    private javax.swing.JCheckBoxMenuItem showWarningsItem;
    private javax.swing.JCheckBoxMenuItem skipAcknowledgeInvasionEnemyItem;
    private javax.swing.JCheckBoxMenuItem skipAcknowledgeInvasionSelfItem;
    private javax.swing.JCheckBoxMenuItem skipDiceItem;
    private javax.swing.JCheckBoxMenuItem skipEndConfirmationItem;
    private javax.swing.JCheckBoxMenuItem soundsItem;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JCheckBoxMenuItem useDefaultAttackItem;
    private javax.swing.JCheckBoxMenuItem useDefaultBattleLossesItem;
    private javax.swing.JCheckBoxMenuItem useDefaultDefenseItem;
    private javax.swing.JButton viewActiveCardsButton;
    private javax.swing.JButton viewCardButton;
    private javax.swing.JButton viewResultsButton;
    private javax.swing.JLabel waitingLabel;
    private javax.swing.JPanel waitingPanel;
    private javax.swing.JLabel yearLabel;
    private javax.swing.JButton yesButton;
    private javax.swing.JPanel yesNoPanel;
    // End of variables declaration//GEN-END:variables
    
    public void initializeDisplay() {
        mapCanvas.updateSize();
    }
    
    public void updateDisplay() {
        
        if( debugDialog.isVisible() ) {
            debugDialog.refresh();
        }
        
        if(getBoard() == null || getBoard().getCurrentPlayer() == null) {
            mapCanvas.repaint();
            globalPanel.setVisible(false);
            playerPanel.setVisible(false);
            tabbedPane.setVisible(false);
            playerInfoPanel.setVisible(false);
            showCard(blankPanel);
            return;
        }
        
        globalPanel.setVisible(true);
        playerPanel.setVisible(true);
        tabbedPane.setVisible(true);
        if( tabbedPane.getTabCount() < 2 ) {
            tabbedPane.removeAll();
            tabbedPane.insertTab("Game", null, gamePanel, null, 0);
            tabbedPane.insertTab("Cards", null, cardsPanel, null, 1);
        }
        
        
        playerInfoPanel.setVisible(true);
        
        playerPanel.setPlayer(getBoard().getRules().getCurrencyName(),
                getBoard().getCurrentPlayer());
        if( getBoard().getYear() == 0 ) {
            yearLabel.setText("Prologue");
        } else {
            yearLabel.setText(getBoard().getRules().getTurnName()
            + " " + getBoard().getYear());
        }
        
        populatePlayerComboBox(playerCardsComboBox);
        populatePlayerComboBox(choosePlayerComboBox);
        
        //update the playerInfoPanel
        updatePlayerInfoTextPane(playerInfoTextPane);
        
        cardsPanel.setEnabled(allowGUI()
        && !getBoard().getTurnMode().equals(TurnMode.BUY_CARDS) );
        
        checkForAgentMove();
        
        // Highlight invasion, in case it was not declared by local GUI
        if( getBoard().getTurnMode().equals(TurnMode.DECLARE_ATTACK_FORCE)
        || getBoard().getTurnMode().equals(TurnMode.DECLARE_DEFENSE_FORCE)
        || getBoard().getTurnMode().equals(TurnMode.BATTLE_RESULTS)
        || getBoard().getTurnMode().equals(TurnMode.COMPLETE_FREE_MOVE)
        || getBoard().getTurnMode().equals(TurnMode.ACKNOWLEDGE_INVASION) ) {
            setSelectedTerritory(getBoard().getAttackingTerritory());
            setSelectedTerritory2(getBoard().getDefendingTerritory());
        }
        
        if( !allowGUI() ) {
            tabbedPane.remove(cardsPanel);
            tabbedPane.setSelectedComponent(gamePanel);
        }
        if( !allowGUI() && !
                (getBoard().getTurnMode().equals(TurnMode.GAME_OVER)
                || getBoard().getTurnMode().equals(TurnMode.BATTLE_RESULTS))) {
            showCard(waitingPanel);
            
        } else if( tabbedPane.getSelectedComponent() == cardsPanel ) {
            updateCardsDisplay();
            
        } else {
            if( getBoard().getTurnMode().equals(TurnMode.BID) ) {
                showCard(bidTurnOrderPanel);
                clearSelection();
                Player player = getBoard().getCurrentPlayer();
                populatePlayerList(bidPlayerList, true);
                bidField.setText("");
                
            } else if( getBoard().getTurnMode().equals(TurnMode.CHOOSE_ORDER) ) {
                showCard(chooseTurnOrderPanel);
                clearSelection();
                Player player = getBoard().getCurrentPlayer();
                populatePlayerList(chooseTurnPlayerList, true);
                populateChooseTurnComboBox();
                
            } else if( getBoard().getTurnMode().equals(TurnMode.BUY_UNITS) ) {
                showCard(buyUnitsPanel);
                purchasedForcePanel.setAvailable(getBoard().getCurrentPlayer().getReinforcements());
                purchasedForcePanel.setEnabled(false);
                populateBuyUnitComboBox();
                if( buyUnitComboBox.getItemCount() == 0 ) {
                    autoMove(SpecialMove.END_MOVE);
                }
                
            } else if( getBoard().getTurnMode().equals(TurnMode.BUY_CARDS) ) {
                showCard(drawCardPanel);
                tabbedPane.remove(cardsPanel);
                doneDrawingCardsButton.setVisible(true);
                populateDrawCardList();
                if( decksList.getModel().getSize() <= 0 ) {
                    autoMove(SpecialMove.END_MOVE);
                }else {
                    decksList.requestFocusInWindow();
                }
            } else if( getBoard().getTurnMode().equals(TurnMode.DRAW_CARD) ) {
                showCard(drawCardPanel);
                doneDrawingCardsButton.setVisible(false);
                populateDrawCardList();
                if( decksList.getModel().getSize() <= 0 ) {
                    autoMove(SpecialMove.END_MOVE);
                }else {
                    decksList.requestFocusInWindow();
                }
            } else if( getBoard().getTurnMode().equals(TurnMode.REINFORCEMENTS) ) {
                reinforcementsPanel.setTitle("Reinforcements");
                showCard(placeReinforcementsPanel);
                clearSelection();
                Player player = getBoard().getCurrentPlayer();
                reinforcementsPanel.setAvailable(player.getReinforcements());
                
            } else if( getBoard().getTurnMode().equals(TurnMode.EVEN_REINFORCEMENTS) ) {
                Player player = getBoard().getCurrentPlayer();
                reinforcementsPanel.setAvailable(player.getReinforcements());
                reinforcementsPanel.setSelected(player.getReinforcements().getDefaultPlace(getBoard().getNumberToPlace()) );
                reinforcementsPanel.setTitle("Place " + Math.min(getBoard().getNumberToPlace(), player.getReinforcements().getSize()));
                showCard(placeReinforcementsPanel);
                clearSelection();
                
            } else if( getBoard().getTurnMode().equals(TurnMode.DECLARE_INVASIONS) ) {
                showCard(declareMovesPanel);
                endMoves.setText("End Invasions");
                if( getBoard().getAttackingTerritory() != null
                        && getBoard().getAttackingTerritory().getOwner() != getBoard().getCurrentPlayer() ) {
                    getBoard().setAttackingTerritory(null);
                }
                setSelectedTerritory(getBoard().getAttackingTerritory());
                setSelectedTerritory2(getBoard().getDefendingTerritory());
                if( getSelectedTerritory2() != null
                        && getSelectedTerritory2().getOwner() == getBoard().getCurrentPlayer() ) {
                    setSelectedTerritory(getSelectedTerritory2());
                    setSelectedTerritory2(null);
                }
            } else if( getBoard().getTurnMode().equals(TurnMode.ACKNOWLEDGE_INVASION)
            || getBoard().getTurnMode().equals(TurnMode.ACKNOWLEDGE_GAME_OVER)
            || getBoard().getTurnMode().equals(TurnMode.ACKNOWLEDGE_EACH_PLAYER) ) {
                showCard(acknowledgePanel);
                if( getBoard().getTurnMode().equals(TurnMode.ACKNOWLEDGE_INVASION) ) {
                    if( getBoard().getDefendingTerritory().getOwner()
                    == getBoard().getCurrentPlayer() ) {
                        if( skipAcknowledgeInvasionSelfItem.isSelected() ) {
                            autoMove(SpecialMove.ACKNOWLEDGE);
                        }
                    } else {
                        if( skipAcknowledgeInvasionEnemyItem.isSelected() ) {
                            autoMove(SpecialMove.ACKNOWLEDGE);
                        }
                    }
                } else if( getBoard().getTurnMode().equals(TurnMode.ACKNOWLEDGE_GAME_OVER)
                && autoEndGameItem.isSelected() ) {
                    Card use = null;
                    for( Card card : getBoard().getCurrentPlayer().getCards() ) {
                        if( card.canPlay(getBoard()) ) {
                            use = card;
                        }
                    }
                    if( use != null ) {
                        autoMove(use);
                    } else {
                        autoMove(SpecialMove.ACKNOWLEDGE);
                    }
                }
                
            } else if( getBoard().getTurnMode().equals(TurnMode.DECLARE_ATTACK_FORCE) ) {
                forcePanel.setTitle("Attack Force");
                showCard(chooseForcePanel);
                Player player = getBoard().getCurrentPlayer();
                forcePanel.setAvailable( getBoard().getAttackingTerritory().getForce() );
                forcePanel.setSelected( getBoard().getAttackingTerritory().getForce().getDefaultAttack(getBoard().getRules()) );
                
                if( useDefaultAttackItem.isSelected() ) {
                    autoMove( forcePanel.getSelected() );
                }
                
            } else if( getBoard().getTurnMode().equals(TurnMode.DECLARE_DEFENSE_FORCE) ) {
                if( getBoard().getDefendingTerritory().getForce().getMobileIndependentSize() == 0 ) {
                    autoMove( getBoard().getDefendingTerritory().getForce() );
                } else {
                    forcePanel.setTitle("Defense Force");
                    showCard(chooseForcePanel);
                    Player player = getBoard().getCurrentPlayer();
                    forcePanel.setAvailable( getBoard().getDefendingTerritory().getForce() );
                    forcePanel.setSelected( getBoard().getDefendingTerritory().getForce().getDefaultDefense(getBoard().getRules()) );
                    if( useDefaultDefenseItem.isSelected() ) {
                        autoMove( forcePanel.getSelected() );
                    }
                }
                
            } else if( getBoard().getTurnMode().equals(TurnMode.BATTLE_RESULTS) ) {
                showCard(battleResultsPanel);
                attackerDicePanel.setDice(getBoard().getAttackerDice());
                defenderDicePanel.setDice(getBoard().getDefenderDice());
                dismissButton.setEnabled(allowGUI());
                if( skipDiceItem.isSelected() ) {
                    autoMove(SpecialMove.ACKNOWLEDGE);
                }
                
            } else if( getBoard().getTurnMode().equals(TurnMode.CHOOSE_DESTROYED) ) {
                Territory removeFrom = getBoard().getDamagedTerritory();
                if( removeFrom != null ) {
                    Force available = removeFrom.getForce().getMobileIndependentForce();
                    if( removeFrom.getForce().getMobileIndependentSize() <= removeFrom.getNumberToDestroy() ) {
                        // All units must be killed; do it automatically
                        autoMove(available.getMobileIndependentForce());
                    } else if( available.getSpecialUnits().size() == 0 ) {
                    /* Only regular units; automatically kill them
                     * to save the user the trouble of clicking "Accept" */
                        Force destroy = new Force();
                        destroy.setRegularUnits(removeFrom.getNumberToDestroy());
                        autoMove(destroy);
                    } else {
                        clearSelection();
                        setSelectedTerritory(removeFrom);
                        forcePanel.setTitle("Destroy " + removeFrom.getNumberToDestroy());
                        showCard(chooseForcePanel);
                        forcePanel.setAvailable(available);
                        Force defaultForce = removeFrom.getForce().getDefaultDestroyed(removeFrom.getNumberToDestroy());
                        forcePanel.setSelected(defaultForce);
                        if( useDefaultBattleLossesItem.isSelected() && defaultForce.getSpecialUnits().isEmpty()) {
                            autoMove( defaultForce );
                        }
                    }
                } else {
                    // Nothing to destroy!
                    autoMove(new Force());
                }
                
            } else if( getBoard().getTurnMode().equals(TurnMode.DECLARE_FREE_MOVES) ) {
                showCard(declareMovesPanel);
                clearSelection();
                endMoves.setText("End Turn");
                
            } else if( getBoard().getTurnMode().equals(TurnMode.COMPLETE_FREE_MOVE) ) {
                forcePanel.setTitle("Free Move");
                showCard(chooseForcePanel);
                Player player = getBoard().getCurrentPlayer();
                forcePanel.setAvailable( getBoard().getAttackingTerritory().getForce().getMobileForce() );
                forcePanel.setSelected( getBoard().getAttackingTerritory().getForce().getDefaultFreeMove() );
                
            } else if( getBoard().getTurnMode().equals(TurnMode.CHOOSE_TERRITORY)
            || getBoard().getTurnMode().equals(TurnMode.DESTROY_A_REGULAR_UNIT)
            || getBoard().getTurnMode().equals(TurnMode.CLAIM_TERRITORIES) ) {
                showCard(blankPanel);
                
                //Dan Goggins commented this out.....personally, i dont think a territory should be unhighlighted
                //in this section of the game
                //clearSelection();
                
            } else if( getBoard().getTurnMode().equals(TurnMode.CHOOSE_COMMANDER) ) {
                setSelectedTerritory(getBoard().getDefendingTerritory());
                forcePanel.setTitle("Select a unit");
                showCard(chooseForcePanel);
                forcePanel.setAvailable( getSelectedTerritory().getForce() );
                forcePanel.setSelected( new Force() );
                
            } else if( getBoard().getTurnMode().equals(TurnMode.CHOOSE_PLAYER) ) {
                showCard(choosePlayerPanel);
                clearSelection();
                
            } else if( getBoard().getTurnMode().equals(TurnMode.CHOOSE_YES_NO) ) {
                showCard(yesNoPanel);
                clearSelection();
                
            } else if( getBoard().getTurnMode().equals(TurnMode.GAME_OVER) ) {
                showCard(gameOverPanel);
                clearSelection();
                
            } else if( getBoard().getTurnMode().equals(TurnMode.FORCE_PLAY_CARD) ) {
                tabbedPane.remove(gamePanel);
                tabbedPane.setSelectedComponent(cardsPanel);
            }
        }
        
        if( mapCanvas.isScrollToHighlighted() && ! mapCanvas.getHighlighted().isEmpty() ) {
            Rectangle rectangle = mapCanvas.getHighlighted().get(
                    mapCanvas.getHighlighted().size() - 1)
                    .getShape().getBounds();
            rectangle.x *= mapCanvas.getZoomFactor();
            rectangle.y *= mapCanvas.getZoomFactor();
            rectangle.width *= mapCanvas.getZoomFactor();
            rectangle.height *= mapCanvas.getZoomFactor();
            mapCanvas.scrollRectToVisible(rectangle);
        }
        
        repaint();
        
    }
    
    public void autoMove(Object move) {
        if( allowGUI() ) {
            put(move);
        }
    }
    
    public void showCard(Component card) {
        ((CardLayout)(gamePanel.getLayout())).show(gamePanel, card.getName());
    }
    
    class ClickListener extends MouseAdapter {
        public void mousePressed(MouseEvent e) {
            //uncomment this if you want to be able to click when the the cards panel is displayed
            if( (e.getButton() == MouseEvent.BUTTON1)
            //if( (tabbedPane.getSelectedComponent() == gamePanel)
            //  && (e.getButton() == MouseEvent.BUTTON1)
            && mapCanvas.contains(e.getPoint() )
            && allowGUI() ) {
                if( tabbedPane.getSelectedComponent() != gamePanel ) {
                    tabbedPane.setSelectedComponent(gamePanel);
                }
                if( getBoard().getTurnMode().equals(TurnMode.BATTLE_RESULTS) ) {
                    put(SpecialMove.ACKNOWLEDGE);
                    return;
                } else if( getBoard().getTurnMode().equals(TurnMode.CHOOSE_DESTROYED)
                || getBoard().getTurnMode().equals(TurnMode.DECLARE_ATTACK_FORCE)
                || getBoard().getTurnMode().equals(TurnMode.DECLARE_DEFENSE_FORCE) ) {
                    put(forcePanel.getSelected());
                    return;
                }
                Point point = e.getPoint();
                point = mapCanvas.resolveZoom(point);
                Territory clicked = mapCanvas.getTerritoryAt(point);
                if( clicked == null ) {
                    clearSelection();
                    mapCanvas.repaint();
                    return;
                }
                if( getBoard().getTurnMode().equals(TurnMode.REINFORCEMENTS)
                || getBoard().getTurnMode().equals(TurnMode.EVEN_REINFORCEMENTS) ) {
                    setSelectedTerritory(clicked);
                    mapCanvas.repaint();
                    put(new ForcePlacement(clicked, reinforcementsPanel.getSelected()));
                } else if( getBoard().getTurnMode().equals(TurnMode.COMPLETE_FREE_MOVE) ) {
                    if( clicked == getBoard().getAttackingTerritory() ) {
                        put(new Force());
                    } else if( clicked == getBoard().getDefendingTerritory() ) {
                        put(forcePanel.getSelected());
                    }
                } else if( getBoard().getTurnMode().equals(TurnMode.DECLARE_INVASIONS) ) {
                    if( clicked.getOwner() == getBoard().getCurrentPlayer() ) {
                        setSelectedTerritory(clicked);
                        mapCanvas.repaint();
                    } else {
                        setSelectedTerritory2(clicked);
                        mapCanvas.repaint();
                    }
                    if( getSelectedTerritory() != null && getSelectedTerritory2() != null ) {
                        put(new TerritoryDuple(getSelectedTerritory(), getSelectedTerritory2()));
                    }
                } else if( getBoard().getTurnMode().equals(TurnMode.DECLARE_FREE_MOVES) ) {
                    if( clicked.getOwner() == getBoard().getCurrentPlayer() ) {
                        if( getSelectedTerritory() == null ) {
                            setSelectedTerritory(clicked);
                            mapCanvas.repaint();
                        } else {
                            setSelectedTerritory2(clicked);
                            mapCanvas.repaint();
                        }
                        if( getSelectedTerritory() != null && getSelectedTerritory2() != null
                                && getSelectedTerritory() != getSelectedTerritory2() ) {
                            put(new TerritoryDuple(getSelectedTerritory(), getSelectedTerritory2()));
                        }
                    }
                } else if( getBoard().getTurnMode().equals(TurnMode.CHOOSE_TERRITORY)
                || getBoard().getTurnMode().equals(TurnMode.CLAIM_TERRITORIES)
                || getBoard().getTurnMode().equals(TurnMode.DESTROY_A_REGULAR_UNIT ) ) {
                    if( clicked != null ) {
                        setSelectedTerritory(clicked);
                        mapCanvas.repaint();
                        put(clicked);
                        
                        if( clicked.getOwner() == getBoard().getCurrentPlayer() && getBoard().getTurnMode().equals(TurnMode.CLAIM_TERRITORIES)) {
                            SoundDriver.play("tsshh.wav");
                        } else if( getBoard().getTurnMode().equals(TurnMode.CLAIM_TERRITORIES) ) {
                            SoundDriver.play("tss.wav");
                        }
                    }
                } else if( getBoard().getTurnMode().equals(TurnMode.CHOOSE_PLAYER) ) {
                    if( clicked.getOwner() != null && clicked.getOwner() != Player.NEUTRAL) {
                        put(clicked.getOwner());
                    }
                }
            }
        }
    }
    
    public void put(final Object response) {
        if( gameThread != null && gameThread.isAlive() ) {
            try {
                
                getBoard().getMoveVerifier().verify(getBoard(), response);
                if( isConnected() ) {
                    
                    synchronized(this) {
                        if( ! isNetworkMovePlaced() ) {
                            setNetworkMovePlaced(true);
                            networkMessageThread.invokeLater(new Runnable() {
                                public void run() {
                                    String move = XMLHandler.toString(
                                            XMLHandler.createMoveListDocument(getBoard(),
                                            Collections.singletonList(response)));
                                    try {
                                        client.sendMove(move);
                                    } catch (CallException ex) {
                                        ex.printStackTrace();
                                    }
                                }
                            });
                        }
                    }
                } else {
                    gameThread.put(response);
                    setAgentMovePlaced(false);
                    updateDisplay();
                }
                
            } catch(IllegalMoveException e) {
                if( allowGUI() ) {
                    JOptionPane.showMessageDialog(this, e.getMessage(), "Illegal Move",
                            JOptionPane.ERROR_MESSAGE);
                    mapCanvas.repaint();
                } else {
                    getBoard().sendMessage("An agent attempted to make an"
                            + " illegal move:  " + e.getMessage() + "\n"
                            + "Please save the game and report this bug");
                    // Do not use instanceof, since some agents extend RandomAgent
                    if( getBoard().getCurrentPlayer().getAgent().getClass().getName().equals(RandomAgent.class.getName()) ) {
                        getBoard().sendMessage("Returning player to human control");
                        getBoard().getCurrentPlayer().setAgent(new LocalHumanAgent());
                    } else {
                        getBoard().sendMessage("Using a random agent for this move");
                        Agent agent = getBoard().getCurrentPlayer().getAgent();
                        Agent random = new RandomAgent();
                        getBoard().getCurrentPlayer().setAgent(random);
                        put(random.getMove(getBoard()));
                        getBoard().getCurrentPlayer().setAgent(agent);
                    }
                }
            }
        }
    }
    
    public boolean allowGUI() {
        if( getBoard() == null || getBoard().getCurrentPlayer() == null
                || getBoard().getCurrentPlayer().getAgent() == null ) {
            return false;
        }
        return getBoard().getCurrentPlayer().getAgent().allowGUI();
    }
    
    public void populatePlayerList(JList list, boolean addEnergy) {
        DefaultListModel model = new DefaultListModel();
        for( Player player : getBoard().getLivingPlayers() ) {
            String string = player.toString();
            if( addEnergy ) {
                string += " (" + player.getEnergy() + ")";
            }
            model.addElement(string);
        }
        list.setModel(model);
    }
    
    public void populateChooseTurnComboBox() {
        chooseTurnComboBox.removeAllItems();
        for( Integer i : getBoard().getTurnChoices() ) {
            chooseTurnComboBox.addItem(i);
        }
    }
    
    public void populateBuyUnitComboBox() {
        buyUnitComboBox.removeAllItems();
        for( SpecialUnit special : getBoard().getRules().getUnitsForPurchase() ) {
            if( getBoard().getMoveVerifier().isLegal(getBoard(), special) ) {
                buyUnitComboBox.addItem(special);
            }
        }
    }
    
    public Territory getSelectedTerritory() {
        return selectedTerritory;
    }
    
    public void setSelectedTerritory(Territory selectedTerritory) {
        this.selectedTerritory = selectedTerritory;
        mapCanvas.setHighlighted(selectedTerritory, selectedTerritory2);
    }
    
    public Territory getSelectedTerritory2() {
        return selectedTerritory2;
    }
    
    public void setSelectedTerritory2(Territory selectedTerritory2) {
        this.selectedTerritory2 = selectedTerritory2;
        mapCanvas.setHighlighted(selectedTerritory, selectedTerritory2);
    }
    
    public void clearSelection() {
        selectedTerritory = null;
        selectedTerritory2 = null;
        mapCanvas.getHighlighted().clear();
    }
    
    public Board getBoard() {
        return mapCanvas.getBoard();
    }
    
    public void populatePlayerComboBox(JComboBox comboBox) {
        comboBox.removeAllItems();
        for( Player player : getBoard().getLivingPlayers() ) {
            comboBox.addItem(player);
        }
        comboBox.setSelectedItem(getBoard().getCurrentPlayer());
    }
    
    public void updateConnectedPlayerListBox() {
        if( isConnected() ) {
            new Thread() {
                public void run() {
                    final List<String> playerList = new ArrayList<String>();
                    try {
                        Map<Long, String> connected = client.getAllConnected();
                        
                        for( String name : connected.values() ) {
                            playerList.add(name);
                        }
                        final JList jList = connectedPlayerListBox;
                        java.awt.EventQueue.invokeLater(new Runnable() {
                            public void run() {
                                jList.setListData(playerList.toArray());
                            }
                        });
                    } catch(CallException ex) {
                        ex.printStackTrace();
                    }
                }
            }.start();
        }
    }
    
    public void updatePlayerInfoTextPane(JTextPane textPane) {
        textPane.setEditable(true);
        textPane.selectAll();
        textPane.replaceSelection("");
        for( int i = 0; i < getBoard().getLivingPlayers().size(); ++i ) {
            Player player = getBoard().getLivingPlayers().get(i);
            
            Style style = textPane.addStyle("Player " + player.hashCode() + player.getColor(), null);
            StyleConstants.setForeground(style, player.getColor());
            textPane.setCharacterAttributes(style, true);
            
            textPane.replaceSelection(player.getName());
            textPane.replaceSelection( ((getBoard().getRules().getCurrencyName() != null)
            ? (" " + getBoard().getRules().getCurrencyName().charAt(0) + ": " + player.getEnergy() + " ") : " " ));
            
            //show the current player points
            int territories = getBoard().getTerritoriesOwned(player).size();
            int continents = CommonBoardMethods.getContinentBonuses(getBoard(), player);
            int bonus = player.getBonusPoints();
            int totalPoints = territories + continents + bonus;
            int units = CommonBoardMethods.getMobileUnitCount(getBoard(), player);
            textPane.replaceSelection("S: " + totalPoints + " ");
            textPane.replaceSelection("A: " + units + "  ");
            
            // Count cards of each type
            Map<PlayableDeck, Integer> cardCount = new HashMap<PlayableDeck, Integer>();
            for( Card card : player.getCards() ) {
                int previous = 0;
                if( cardCount.get(card.getDeck()) != null ) {
                    previous = cardCount.get(card.getDeck());
                }
                cardCount.put(card.getDeck(), previous + 1);
            }
            
            for( PlayableDeck deck : cardCount.keySet() ) {
                textPane.insertIcon(deck.getIcon());
                textPane.replaceSelection(" " + cardCount.get(deck) + "  ");
            }
            textPane.replaceSelection("\n");
            
        }
        textPane.setEditable(false);
    }
    
    public void updateCardsDisplay() {
        Player player = (Player)playerCardsComboBox.getSelectedItem();
        DefaultListModel model = new DefaultListModel();
        if( player != null ) {
            for( Card card : player.getCards() ) {
                if( player == getBoard().getCurrentPlayer() ) {
                    model.addElement(card);
                } else {
                    model.addElement(card.getName(true, false));
                }
            }
        }
        cardsList.setModel(model);
        viewActiveCardsButton.setEnabled(!getBoard().getCardsInPlay().isEmpty());
        updateCardButtonState();
    }
    
    public void updateCardButtonState() {
        if( (Player)playerCardsComboBox.getSelectedItem()
        == getBoard().getCurrentPlayer() ) {
            Card card = (Card)cardsList.getSelectedValue();
            playCardButton.setEnabled( card != null
                    && getBoard().getMoveVerifier().isLegal(getBoard(), card));
            viewCardButton.setEnabled(cardsList.getSelectedValue() != null);
        } else {
            playCardButton.setEnabled(false);
            viewCardButton.setEnabled(false);
        }
    }
    
    public void populateDrawCardList() {
        decksList.removeAll();
        List<PlayableDeck> decks = new ArrayList<PlayableDeck>();
        for( PlayableDeck deck : getBoard().getDecks() ) {
            if(     (getBoard().getTurnMode().equals(TurnMode.BUY_CARDS) && deck.canBuy(getBoard()))
            ||  (getBoard().getTurnMode().equals(TurnMode.DRAW_CARD) && deck.canDraw(getBoard()))   ) {
                deck.setDisabled(false);
            }else {
                deck.setDisabled(true);
            }
            decks.add(deck);
        }
        if(decks.size()>0) {
            decksList.setListData(decks.toArray());
            if( !getBoard().getCurrentPlayer().getCards().isEmpty() ) {
                //select last type of card player bought, I think
                decksList.setSelectedValue(getBoard().getCurrentPlayer().getCards().get(getBoard().getCurrentPlayer().getCards().size()-1).getDeck(),true);
            }
        }
    }
    
    public void openFile(boolean newGame, boolean customizeRules,
            boolean replay, Document document) {
        if(replay) {
            playersDialog.close(false);
        }
        if(document == null) {
            if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                document = XMLHandler.readDocument(fileChooser.getSelectedFile());
            } else {
                return;
            }
        }
        if(document == null) {
            JOptionPane.showMessageDialog(this, "Could not read map file",
                    "Error", JOptionPane.ERROR_MESSAGE);
            clearGame();
            return;
        }
        resetGame();
        originalBoardState = (Document)document.clone();
        boolean error = !XMLHandler.load(document, getBoard(), null);
        if(error) {
            JOptionPane.showMessageDialog(this, "Board data is invalid",
                    "Error", JOptionPane.ERROR_MESSAGE);
            clearGame();
            return;
        }
        mapCanvas.updateImage();
        mapCanvas.updateSize();
        
        if(replay) {
            try {
                XMLHandler.parseOnlyPlayerList(document, getBoard());
            } catch(InvalidXMLException ex) {
                // Who cares?  Replay agent anyway
                ex.printStackTrace();
            }
            Agent agent = new ReplayAgent(XMLHandler.getMoveList(document));
            for(Player player : getBoard().getPlayers()) {
                player.setAgent(agent);
            }
            setGameThread(new GameThread().start(getBoard()));
            put(agent.getMove(getBoard())); // Initialize random number generator
            loadFile(newGame, replay, customizeRules, document);
        } else {
            try {
                XMLHandler.parseOnlyPlayerList(document, getBoard());
            } catch(InvalidXMLException ex) {
                // Who cares?  User can set up players himself
                ex.printStackTrace();
            }
            playersDialog.showDialog(getBoard(), this, this, newGame,
                    replay, customizeRules, document, this);
        }
        
    }
    
    public void loadFile(boolean newGame, boolean replay,
            boolean customizeRules, Document document) {
        if(newGame) {
            if(customizeRules) {
                getBoard().setRules((Rules)CustomizerDialog.showDialog(this, getBoard().getRules(), IncludedResources.RULES));
            }
        }
        originalBoardState.getRootElement().removeChild(XMLHandler.PLAYER_LIST);
        originalBoardState.getRootElement().addContent(XMLHandler.createElement(getBoard().getPlayers(), false));
        boolean connected = isConnected();
        if(newGame) {
            // If we are connected, this will start a game and then
            // send the "load" command to all clients (including this one)
            // Disable board messages temporarily so the user doesn't
            // see "Game start" twice
            if( connected ) {
                getBoard().removeBoardMessageListener(this);
            }
            setGameThread(new GameThread().start(getBoard()));
            long random = new Random().nextLong();
            gameThread.put(random);
        } else if( !replay && !XMLHandler.load(document, getBoard(), this) ) {
            JOptionPane.showMessageDialog(this, "Could not load game" +
                    " state",
                    "Error", JOptionPane.ERROR_MESSAGE, null);
            clearGame();
            return;
        }
        if( connected ) {
            final String message = XMLHandler.toString(
                    XMLHandler.createGameDocument(originalBoardState, getBoard(),
                    gameThread.getLog(), true, loadedDefaultMapPath));
            clearGame();
            networkMessageThread.invokeLater(new Runnable() {
                public void run() {
                    try {
                        client.sendNewGame(message);
                    } catch (CallException ex) {
                        ex.printStackTrace();
                    }
                }
            });
        } else {
            beginGame();
        }
    }
    
    public void save() {
        if(fileChooser.getSelectedFile() != null) {
            boolean saved = XMLHandler.save(fileChooser.getSelectedFile(),
                    originalBoardState, getBoard(), gameThread );
            if(!saved) {
                JOptionPane.showMessageDialog(this, "Could not write to file",
                        "Error", JOptionPane.ERROR_MESSAGE, null);
            }
        } else {
            saveAs();
        }
    }
    
    public void saveAs() {
        if(fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            save();
        }
    }
    
    public void handleNewPrivateChatDialog(String listvalue) {
        //make sure that we dont already have a private chat for this person and that the client didnt select themselves
        boolean noexists = true;
        for(PrivateChatDialog tempdiag : privateChatDialogs) {
            if( tempdiag.getName().equals(listvalue) ) {
                noexists = false;
                
                //here, just make sure that the dialog gets visible again
                tempdiag.setVisible(true);
            }
        }
        
        if( noexists && client.getName().equals(listvalue) == false) {
            //here, open up a dialog to handle the private chat
            PrivateChatDialog diag = new PrivateChatDialog(this, false);
            diag.setName(listvalue);
            diag.setPrivateChatDialogListener(this);
            privateChatDialogs.add(diag);
            
            diag.setVisible(true);
        }
    }
    
    public void receiveBoardMessage(String message) {
        //check to see if this is a private message
        if( message.indexOf("```") > 0 ) {
            //this is a private message, so verify name authenticity
            //part 1 is sender, part 2 is recipient, part 3 is message
            String[] parts = message.split("```");
            
            String diagname = "";
            if( client.getName().equals(parts[0]) ) {
                //this means that we are the sender, so send it to diagname of parts[1]
                diagname = parts[1];
            } else if( client.getName().equals(parts[1]) ) {
                //this means that we are the recipient, so send it to diagname of parts[0]
                diagname = parts[0];
            }
            
            if( diagname.length() > 0 ) {
                //great! we are involved in this private chat
                //now, send the message to the appropriate PrivateChatDialog
                boolean sentmessage = false;
                for( PrivateChatDialog tempdiag : privateChatDialogs ) {
                    if( tempdiag.getName().equals(diagname) ) {
                        tempdiag.addMessage(parts[0] + "> " + parts[2]);
                        
                        //also, make sure that this dialog is visible now
                        tempdiag.setVisible(true);
                        
                        sentmessage = true;
                    }
                }
                
                //but what if this is a new private conversation for this user? then we have to create a PrivateChatDialog
                if( sentmessage == false ) {
                    PrivateChatDialog diag = new PrivateChatDialog(this, false);
                    diag.setName(diagname);
                    diag.addMessage(parts[0] + "> " + parts[2]);
                    diag.setPrivateChatDialogListener(this);
                    privateChatDialogs.add(diag);
                    
                    diag.setVisible(true);
                }
                
                //play a beep!
                SoundDriver.play("chatbeep.wav");
            }
        } else {
            messageTextArea.append(message + "\n");
            messageTextArea.setCaretPosition(messageTextArea.getText().length());
        }
        
        if( message.indexOf(">") > 0 ) {
            SoundDriver.play("chatbeep.wav");
        }
    }
    
    public void sendPrivateMessage(String message) {
        if( isConnected() ) {
            //prepend the sender here
            message = client.getName() + message;
            try {
                client.sendAsynchronizedMessage(XMLHandler.toString(XMLHandler.createMessageDocument(message)));
            } catch (CallException ex) {
                ex.printStackTrace();
            }
        }
    }
    
    public void receiveNetworkMessage(final String message) {
        final Document document = XMLHandler.parseDocument(message);
        if( XMLHandler.isMessage(document) ) {
            receiveBoardMessage(XMLHandler.parseMessage(document));
        } else {
            
            // Wait for network event thread to finish
            networkMessageThread.invokeLater(new Runnable() {
                public void run() {
                    // Then give control to Event Dispatching Thread
                    // to update the board state and display
                    try {
                        java.awt.EventQueue.invokeAndWait(new Runnable() {
                            public void run() {
                                try {
                                    if( XMLHandler.isGame(document) ) {
                                        resetGame();
                                        
                                        originalBoardState = (Document)document.clone();
                                        XMLHandler.parseGameDocument(document, getBoard(), InvadeEarth.this,
                                                client.getConnectionID());
                                        setAgentMovePlaced(false);
                                        setNetworkMovePlaced(false);
                                        mapCanvas.updateImage();
                                        beginGame();
                                    } else if( XMLHandler.isMoveList(document) ) {
                                        if( gameThread != null ) {
                                            XMLHandler.parseMoveList(document.getRootElement(), getBoard(), gameThread);
                                            setAgentMovePlaced(false);
                                            setNetworkMovePlaced(false);
                                            updateDisplay();
                                        }
                                    } else if( XMLHandler.isNetworkDirective(document) ) {
                                        System.out.println("Obsolete: Network directives no longer needed/n" + document.toString());
                                    }
                                } catch(InvalidXMLException e) {
                                    e.printStackTrace();
                                    System.out.println("Bad Message:  " + message);
                                    JOptionPane.showMessageDialog(InvadeEarth.this, "Received invalid game " +
                                            "data over network", "Error", JOptionPane.ERROR_MESSAGE,
                                            null);
                                    clearGame();
                                    return;
                                }
                            }
                        });
                    } catch( InterruptedException e ) {
                    } catch( InvocationTargetException e ) {
                        e.printStackTrace();
                    }
                }
            });
        }
    }
    
    public boolean confirmDisconnect() {
        if( isConnected() ) {
            if( JOptionPane.showConfirmDialog(this, "Disconnect from " +
                    client.getHost() + "?", "Connection",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)
                    == JOptionPane.YES_OPTION ) {
                try {
                    client.disconnect();
                } catch(NotConnectedException ex) {
                    ex.printStackTrace();
                } finally {
                    client = null;
                    updateConnectedPlayerListBox();
                }
            } else {
                return false;
            }
        }
        return true;
    }
    
    public Client getClient() {
        return client;
    }
    
    public void setClient(Client client) {
        this.client = client;
        messagePrefixField.setText(client.getName());
        client.setMessageListener(this);
    }
    
    public boolean isConnected() {
        return client != null && client.isConnected();
    }
    
    public void killGameThread() {
        if( gameThread != null && gameThread.isAlive() ) {
            gameThread.put(GameThread.END_THREAD);
        }
    }
    
    public void resetGame() {
        killGameThread();
        mapCanvas.setBoard(new Board());
        getBoard().addBoardMessageListener(this);
    }
    
    public void beginGame() {
        initializeDisplay();
        updateDisplay();
    }
    
    public void clearGame() {
        killGameThread();
        loadedDefaultMapPath = null;
        mapCanvas.setBoard(null);
        updateDisplay();
    }
    
    public GameThread getGameThread() {
        return gameThread;
    }
    
    public void setGameThread(GameThread gameThread) {
        if( this.gameThread != gameThread ) {
            killGameThread();
        }
        this.gameThread = gameThread;
    }
    
    public void initializeAgentTimer() {
        agentTimer = new Timer(delay, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if( getBoard() != null && getBoard().getCurrentPlayer() != null
                        && ! isAgentMovePlaced() ) {
                    final Object move = getBoard().getCurrentPlayer().getAgent().getMove(getBoard());
                    if( move != null ) {
                        setAgentMovePlaced(true);
                        put(move);
                    } else if( getBoard().getCurrentPlayer().getAgent() instanceof ReplayAgent ) {
                        assumeAIActionPerformed(null);
                    }
                    updateDisplay();
                }
            }
        });
        agentTimer.setCoalesce(false);
        agentTimer.setRepeats(false);
    }
    
    public void checkForAgentMove() {
        if( ! getBoard().getTurnMode().equals(TurnMode.GAME_OVER) && ! pauseAgents
                && getBoard().getCurrentPlayer().getAgent().isAI() ) {
            agentTimer.setDelay(getBoard().getTurnMode().equals(TurnMode.BATTLE_RESULTS)
            ? battleResultsDelay : delay);
            agentTimer.setInitialDelay(agentTimer.getDelay());
            agentTimer.restart();
        }
    }
    
    
    public void confirmExit() {
        if( mapCanvas.getBoard() == null
                || JOptionPane.showConfirmDialog(this, "Exit program?",
                "Exit", JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE ) == JOptionPane.YES_OPTION ) {
            if( isConnected() ) {
                try {
                    client.disconnect();
                } catch (NotConnectedException ex) {
                    ex.printStackTrace();
                }
            }
            killGameThread();
            networkMessageThread.invokeLater(BackgroundEventThread.END_THREAD);
            System.exit(0);
        }
    }
    
    public synchronized boolean isAgentMovePlaced() {
        return agentMovePlaced;
    }
    
    public synchronized void setAgentMovePlaced(boolean agentMovePlaced) {
        this.agentMovePlaced = agentMovePlaced;
    }
    
    public synchronized boolean isNetworkMovePlaced() {
        return networkMovePlaced;
    }
    
    public synchronized void setNetworkMovePlaced(boolean networkMovePlaced) {
        this.networkMovePlaced = networkMovePlaced;
    }
    
    public void connectionMade() {
        updateConnectedPlayerListBox();
    }
    
    public void initializeNewGameMenus() {
        for(int i = 0; i < IncludedResources.MAPS.length; ++i) {
            newMenu.add(createNewGameMenuItem(IncludedResources.MAP_NAMES[i],
                    IncludedResources.MAPS[i], false));
        }
        if( newMenu.getMenuComponentCount() > 0 ) {
            newMenu.addSeparator();
        }
        JMenuItem newFromFile = createNewGameMenuItem("From File...", null, false);
        newFromFile.setAccelerator(KeyStroke.getKeyStroke("control N"));
        newMenu.add(newFromFile);
        for(int i = 0; i < IncludedResources.MAPS.length; ++i) {
            newCustomMenu.add(createNewGameMenuItem(IncludedResources.MAP_NAMES[i],
                    IncludedResources.MAPS[i], true));
        }
        if( newCustomMenu.getMenuComponentCount() > 0 ) {
            newCustomMenu.addSeparator();
        }
        JMenuItem newCustomFromFile = createNewGameMenuItem("From File...", null, true);
        newCustomFromFile.setAccelerator(KeyStroke.getKeyStroke("control shift N"));
        newCustomMenu.add(newCustomFromFile);
    }
    
    public JMenuItem createNewGameMenuItem(String string, final String resource,
            final boolean customRules) {
        JMenuItem result = new JMenuItem(string);
        result.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if( mapCanvas.getBoard() == null
                        || JOptionPane.showConfirmDialog(InvadeEarth.this, "Clear game?",
                        "Confirm", JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE ) == JOptionPane.YES_OPTION ) {
                    loadedDefaultMapPath = resource;
                    openFile(true, customRules, false,
                            resource == null ? null : XMLHandler.readDocument(
                            ResourceAnchor.class.getResourceAsStream(resource)));
                }
            }
        });
        return result;
    }
    
    
}
