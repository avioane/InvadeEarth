/*
 * MapEditor.java
 *
 * Created on June 20, 2005, 12:26 PM
 */

package org.invade;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.event.MouseInputAdapter;

/**
 *
 * @author  jcrosm
 */
public class MapEditor extends javax.swing.JFrame {
    
    private Point popupLocation = new Point();
    private Territory selectedTerritory = null;
    private boolean definingBoundary = false;
    private Point dragHandle = new Point();
    private boolean draggingTerritory = false;
    private boolean draggingCenter = false;
    private double snapThreshold = 20.0;
    private boolean autosnap = true;
    
    private EdgeType currentEdgeType = EdgeType.values()[0];
    private enum EditMode { TERRITORIES, EDGES };
    private EditMode mode = null;
    private PopupListener popupListener = new PopupListener();
    private TerritoryModeClickListener territoryModeClickListener = new TerritoryModeClickListener();
    private EdgeModeClickListener edgeModeClickListener = new EdgeModeClickListener();
    private JFileChooser fileChooser = new JFileChooser();
    
    private String title;
    
    /** Creates new form MapEditor */
    public MapEditor() {
        initComponents();
        
        title = getTitle();
        mapCanvas.setBoard(new Board());
        
        jMenuBar.add(new HelpMenu(this));
        
        // Add territory types to "Set Type" menu and combo box
        for( final TerritoryType type : TerritoryType.values() ) {
            JMenuItem item = new JMenuItem();
            item.setText( type.toString() );
            item.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    setTerritoryType(type);
                }
            });
            territoryTypeMenu.add(item);
            
            territoryTypeComboBox.addItem(type);
        }
        
        updateContinentLists();
        
        // Add edge types to combo box
        for( EdgeType type : EdgeType.values() ) {
            edgeTypesComboBox.addItem(type);
        }
        
        
        // Begin with territories tool selected
        territoriesRadioButton.doClick();
        
        setLocation(100, 30);
        
        WindowCenteringUtility.center(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPopupMenu = new javax.swing.JPopupMenu();
        renameTerritory = new javax.swing.JMenuItem();
        territoryTypeMenu = new javax.swing.JMenu();
        setContinentMenu = new javax.swing.JMenu();
        setLandingSite = new javax.swing.JCheckBoxMenuItem();
        setDevastated = new javax.swing.JCheckBoxMenuItem();
        setPlague = new javax.swing.JCheckBoxMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        editForce = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        moveMenu = new javax.swing.JMenu();
        moveTerritory = new javax.swing.JMenuItem();
        moveCenter = new javax.swing.JMenuItem();
        moveBoth = new javax.swing.JMenuItem();
        redefinePolygon = new javax.swing.JMenuItem();
        snapPolygon = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JSeparator();
        deleteTerritory = new javax.swing.JMenuItem();
        toolButtonGroup = new javax.swing.ButtonGroup();
        jToolBar = new javax.swing.JToolBar();
        territoriesRadioButton = new javax.swing.JRadioButton();
        edgesRadioButton = new javax.swing.JRadioButton();
        edgeTypesComboBox = new javax.swing.JComboBox();
        defaultContinentLabel = new javax.swing.JLabel();
        continentComboBox = new javax.swing.JComboBox();
        defaultTypeLabel = new javax.swing.JLabel();
        territoryTypeComboBox = new javax.swing.JComboBox();
        jScrollPane = new javax.swing.JScrollPane();
        mapCanvasPanel = new javax.swing.JPanel();
        mapCanvas = new org.invade.MapCanvas();
        jMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMap = new javax.swing.JMenuItem();
        openMap = new javax.swing.JMenuItem();
        saveMap = new javax.swing.JMenuItem();
        saveAsMap = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        exit = new javax.swing.JMenuItem();
        mapMenu = new javax.swing.JMenu();
        setWidth = new javax.swing.JMenuItem();
        setHeight = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        continents = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JSeparator();
        rules = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JSeparator();
        image = new javax.swing.JMenuItem();
        Tools = new javax.swing.JMenu();
        setSnapThreshold = new javax.swing.JMenuItem();
        autosnapMenuItem = new javax.swing.JCheckBoxMenuItem();
        jSeparator7 = new javax.swing.JSeparator();
        stretchWidth = new javax.swing.JMenuItem();
        stretchHeight = new javax.swing.JMenuItem();

        renameTerritory.setText("Rename");
        renameTerritory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameTerritoryActionPerformed(evt);
            }
        });

        jPopupMenu.add(renameTerritory);

        territoryTypeMenu.setText("Set Type");
        jPopupMenu.add(territoryTypeMenu);

        setContinentMenu.setText("Set Continent");
        jPopupMenu.add(setContinentMenu);

        setLandingSite.setText("Landing Site");
        setLandingSite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setLandingSiteActionPerformed(evt);
            }
        });

        jPopupMenu.add(setLandingSite);

        setDevastated.setText("Devastated");
        setDevastated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setDevastatedActionPerformed(evt);
            }
        });

        jPopupMenu.add(setDevastated);

        setPlague.setText("Plague");
        setPlague.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setPlagueActionPerformed(evt);
            }
        });

        jPopupMenu.add(setPlague);

        jPopupMenu.add(jSeparator1);

        editForce.setText("Edit Force...");
        editForce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editForceActionPerformed(evt);
            }
        });

        jPopupMenu.add(editForce);

        jPopupMenu.add(jSeparator2);

        moveMenu.setText("Move");
        moveTerritory.setText("Polygon Only");
        moveTerritory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveTerritoryActionPerformed(evt);
            }
        });

        moveMenu.add(moveTerritory);

        moveCenter.setText("Center Only");
        moveCenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveCenterActionPerformed(evt);
            }
        });

        moveMenu.add(moveCenter);

        moveBoth.setText("Polygon and Center");
        moveBoth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveBothActionPerformed(evt);
            }
        });

        moveMenu.add(moveBoth);

        jPopupMenu.add(moveMenu);

        redefinePolygon.setText("Redefine Boundaries");
        redefinePolygon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redefinePolygonActionPerformed(evt);
            }
        });

        jPopupMenu.add(redefinePolygon);

        snapPolygon.setText("Align Boundaries");
        snapPolygon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snapPolygonActionPerformed(evt);
            }
        });

        jPopupMenu.add(snapPolygon);

        jPopupMenu.add(jSeparator8);

        deleteTerritory.setText("Delete");
        deleteTerritory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTerritoryActionPerformed(evt);
            }
        });

        jPopupMenu.add(deleteTerritory);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Map Editor");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jToolBar.setName("Tools");
        toolButtonGroup.add(territoriesRadioButton);
        territoriesRadioButton.setSelected(true);
        territoriesRadioButton.setText("Territories");
        territoriesRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                territoriesRadioButtonActionPerformed(evt);
            }
        });

        jToolBar.add(territoriesRadioButton);

        toolButtonGroup.add(edgesRadioButton);
        edgesRadioButton.setText("Edges");
        edgesRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgesRadioButtonActionPerformed(evt);
            }
        });

        jToolBar.add(edgesRadioButton);

        edgeTypesComboBox.setMaximumSize(new java.awt.Dimension(128, 24));
        edgeTypesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgeTypesComboBoxActionPerformed(evt);
            }
        });

        jToolBar.add(edgeTypesComboBox);

        defaultContinentLabel.setText("     Default Continent:  ");
        jToolBar.add(defaultContinentLabel);

        continentComboBox.setMaximumSize(new java.awt.Dimension(128, 24));
        jToolBar.add(continentComboBox);

        defaultTypeLabel.setText("     Default Type:  ");
        jToolBar.add(defaultTypeLabel);

        territoryTypeComboBox.setMaximumSize(new java.awt.Dimension(72, 24));
        jToolBar.add(territoryTypeComboBox);

        getContentPane().add(jToolBar, java.awt.BorderLayout.NORTH);

        jScrollPane.setPreferredSize(new java.awt.Dimension(800, 600));
        mapCanvasPanel.setLayout(new java.awt.GridBagLayout());

        mapCanvasPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                mapCanvasPanelComponentResized(evt);
            }
        });

        mapCanvas.setLayout(new javax.swing.BoxLayout(mapCanvas, javax.swing.BoxLayout.X_AXIS));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        mapCanvasPanel.add(mapCanvas, gridBagConstraints);

        jScrollPane.setViewportView(mapCanvasPanel);

        getContentPane().add(jScrollPane, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");
        newMap.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMap.setText("New");
        newMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMapActionPerformed(evt);
            }
        });

        fileMenu.add(newMap);

        openMap.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMap.setText("Open...");
        openMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMapActionPerformed(evt);
            }
        });

        fileMenu.add(openMap);

        saveMap.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMap.setText("Save");
        saveMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMapActionPerformed(evt);
            }
        });

        fileMenu.add(saveMap);

        saveAsMap.setText("Save As...");
        saveAsMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMapActionPerformed(evt);
            }
        });

        fileMenu.add(saveAsMap);

        fileMenu.add(jSeparator4);

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        fileMenu.add(exit);

        jMenuBar.add(fileMenu);

        mapMenu.setText("Map");
        jMenuBar.add(new ViewMenu(this, mapCanvas));
        setWidth.setText("Set Width...");
        setWidth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setWidthActionPerformed(evt);
            }
        });

        mapMenu.add(setWidth);

        setHeight.setText("Set Height...");
        setHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setHeightActionPerformed(evt);
            }
        });

        mapMenu.add(setHeight);

        mapMenu.add(jSeparator3);

        continents.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        continents.setText("Continents...");
        continents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continentsActionPerformed(evt);
            }
        });

        mapMenu.add(continents);

        mapMenu.add(jSeparator5);

        rules.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        rules.setText("Rules...");
        rules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rulesActionPerformed(evt);
            }
        });

        mapMenu.add(rules);

        mapMenu.add(jSeparator6);

        image.setText("Use Background Image...");
        image.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageActionPerformed(evt);
            }
        });

        mapMenu.add(image);

        jMenuBar.add(mapMenu);

        Tools.setText("Tools");
        setSnapThreshold.setText("Set Snap Distance...");
        setSnapThreshold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setSnapThresholdActionPerformed(evt);
            }
        });

        Tools.add(setSnapThreshold);

        autosnapMenuItem.setSelected(true);
        autosnapMenuItem.setText("Autosnap");
        autosnapMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autosnapMenuItemActionPerformed(evt);
            }
        });

        Tools.add(autosnapMenuItem);

        Tools.add(jSeparator7);

        stretchWidth.setText("Stretch Horizontally...");
        stretchWidth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stretchWidthActionPerformed(evt);
            }
        });

        Tools.add(stretchWidth);

        stretchHeight.setText("Stretch Vertically...");
        stretchHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stretchHeightActionPerformed(evt);
            }
        });

        Tools.add(stretchHeight);

        jMenuBar.add(Tools);

        setJMenuBar(jMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editForceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editForceActionPerformed
        if( getSelectedTerritory() != null ) {
            new EditForceDialog(this, getSelectedTerritory(), getBoard().getRules()).setVisible(true);
            mapCanvas.repaint();
        }
    }//GEN-LAST:event_editForceActionPerformed

    private void stretchHeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stretchHeightActionPerformed
        Dimension size = getBoard().getSize();
        Object result = JOptionPane.showInputDialog(this, "New height", "Stretch",
                JOptionPane.QUESTION_MESSAGE, null, null, size.height );
        try {
            if( result != null ) {
                double ratio = (double)Integer.parseInt((String)result) / (double)size.height;
                for( Territory territory : getBoard().getTerritories() ) {
                    territory.getCenter().y = (int)(ratio * territory.getCenter().y);
                    for( int i = 0; i < territory.getShape().npoints; ++i ) {
                        territory.getShape().ypoints[i] = (int)(ratio * territory.getShape().ypoints[i]);
                    }
                }
                size.setSize( size.width, Integer.parseInt((String)result) );
                mapCanvas.updateSize();
            }
        } catch( NumberFormatException e ) {}
    }//GEN-LAST:event_stretchHeightActionPerformed

    private void stretchWidthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stretchWidthActionPerformed
        Dimension size = getBoard().getSize();
        Object result = JOptionPane.showInputDialog(this, "New width", "Stretch",
                JOptionPane.QUESTION_MESSAGE, null, null, size.width );
        try {
            if( result != null ) {
                double ratio = (double)Integer.parseInt((String)result) / (double)size.width;
                for( Territory territory : getBoard().getTerritories() ) {
                    territory.getCenter().x = (int)(ratio * territory.getCenter().x);
                    for( int i = 0; i < territory.getShape().npoints; ++i ) {
                        territory.getShape().xpoints[i] = (int)(ratio * territory.getShape().xpoints[i]);
                    }
                }
                size.setSize( Integer.parseInt((String)result), size.height );
                mapCanvas.updateSize();
            }
        } catch( NumberFormatException e ) {}
    }//GEN-LAST:event_stretchWidthActionPerformed
    
    private void imageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageActionPerformed
        Object selection = JOptionPane.showInputDialog(this,
                "Select an available image", "Map Image",
                JOptionPane.QUESTION_MESSAGE, null, IncludedResources.MAP_IMAGES,
                IncludedResources.MAP_IMAGES[0]);
        if( selection != null ) {
            if( selection.equals(IncludedResources.MAP_IMAGES[0]) ) {
                getBoard().setMapImage(null);
            } else {
                getBoard().setMapImage(selection.toString());
            }
            mapCanvas.updateImage();
        }
    }//GEN-LAST:event_imageActionPerformed
    
    private void setPlagueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setPlagueActionPerformed
        getSelectedTerritory().setPlague( setPlague.isSelected() );
        mapCanvas.repaint();
    }//GEN-LAST:event_setPlagueActionPerformed
    
    private void rulesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rulesActionPerformed
        getBoard().setRules((Rules)CustomizerDialog.showDialog(this, getBoard().getRules(), IncludedResources.RULES));
    }//GEN-LAST:event_rulesActionPerformed
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        confirmExit();
    }//GEN-LAST:event_formWindowClosing
    
    private void mapCanvasPanelComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_mapCanvasPanelComponentResized
        mapCanvas.updateSize();
    }//GEN-LAST:event_mapCanvasPanelComponentResized
    
    private void autosnapMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autosnapMenuItemActionPerformed
        autosnap = autosnapMenuItem.isSelected();
    }//GEN-LAST:event_autosnapMenuItemActionPerformed
    
    private void setSnapThresholdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setSnapThresholdActionPerformed
        Object result = JOptionPane.showInputDialog(this, "Maximum distance to adjust", "Snap",
                JOptionPane.QUESTION_MESSAGE, null, null, snapThreshold );
        try {
            if( result != null ) {
                snapThreshold = Double.parseDouble((String)result);
            }
        } catch( NumberFormatException e ) {}
    }//GEN-LAST:event_setSnapThresholdActionPerformed
    
    private void setDevastatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setDevastatedActionPerformed
        getSelectedTerritory().setDevastated( setDevastated.isSelected(), getBoard() );
        mapCanvas.repaint();
    }//GEN-LAST:event_setDevastatedActionPerformed
    
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        confirmExit();
    }//GEN-LAST:event_exitActionPerformed
    
    private void saveAsMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMapActionPerformed
        saveAs();
    }//GEN-LAST:event_saveAsMapActionPerformed
    
    private void saveMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMapActionPerformed
        save();
    }//GEN-LAST:event_saveMapActionPerformed
    
    private void openMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMapActionPerformed
        open();
    }//GEN-LAST:event_openMapActionPerformed
    
    private void newMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMapActionPerformed
        newMap();
    }//GEN-LAST:event_newMapActionPerformed
    
    private void setLandingSiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setLandingSiteActionPerformed
        getSelectedTerritory().setLandingSite( setLandingSite.isSelected() );
        mapCanvas.repaint();
    }//GEN-LAST:event_setLandingSiteActionPerformed
    
    private void continentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continentsActionPerformed
        new ContinentsDialog(this, true, getBoard()).setVisible(true);
        updateContinentLists();
        mapCanvas.repaint();
    }//GEN-LAST:event_continentsActionPerformed
    
    private void setHeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setHeightActionPerformed
        Dimension size = getBoard().getSize();
        Object result = JOptionPane.showInputDialog(this, "New height", "Resize",
                JOptionPane.QUESTION_MESSAGE, null, null, size.height );
        try {
            if( result != null ) {
                size.setSize( size.width, Integer.parseInt((String)result) );
                mapCanvas.updateSize();
            }
        } catch( NumberFormatException e ) {}
    }//GEN-LAST:event_setHeightActionPerformed
    
    private void setWidthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setWidthActionPerformed
        Dimension size = getBoard().getSize();
        Object result = JOptionPane.showInputDialog(this, "New width", "Resize",
                JOptionPane.QUESTION_MESSAGE, null, null, size.width );
        try {
            if( result != null ) {
                size.setSize( Integer.parseInt((String)result), size.height );
                mapCanvas.updateSize();
            }
        } catch( NumberFormatException e ) {}
    }//GEN-LAST:event_setWidthActionPerformed
    
    private void edgesRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgesRadioButtonActionPerformed
        setMode(EditMode.EDGES);
        defaultContinentLabel.setEnabled(false);
        defaultTypeLabel.setEnabled(false);
        continentComboBox.setEnabled(false);
        territoryTypeComboBox.setEnabled(false);
    }//GEN-LAST:event_edgesRadioButtonActionPerformed
    
    private void territoriesRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_territoriesRadioButtonActionPerformed
        setMode(EditMode.TERRITORIES);
        defaultContinentLabel.setEnabled(true);
        defaultTypeLabel.setEnabled(true);
        continentComboBox.setEnabled(true);
        territoryTypeComboBox.setEnabled(true);
    }//GEN-LAST:event_territoriesRadioButtonActionPerformed
    
    private void edgeTypesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgeTypesComboBoxActionPerformed
        currentEdgeType = (EdgeType)edgeTypesComboBox.getSelectedItem();
        edgesRadioButton.doClick();
    }//GEN-LAST:event_edgeTypesComboBoxActionPerformed
    
    private void snapPolygonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snapPolygonActionPerformed
        snapPolygon();
    }//GEN-LAST:event_snapPolygonActionPerformed
    
    private void redefinePolygonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redefinePolygonActionPerformed
        redefinePolygon();
    }//GEN-LAST:event_redefinePolygonActionPerformed
    
    private void moveBothActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveBothActionPerformed
        draggingCenter = true;
        draggingTerritory = true;
        startDrag( popupLocation );
    }//GEN-LAST:event_moveBothActionPerformed
    
    private void moveCenterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveCenterActionPerformed
        draggingCenter = true;
        if( getSelectedTerritory() != null ) {
            getSelectedTerritory().getCenter().setLocation(popupLocation);
        }
        startDrag( popupLocation );
    }//GEN-LAST:event_moveCenterActionPerformed
    
    private void moveTerritoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveTerritoryActionPerformed
        draggingTerritory = true;
        startDrag( popupLocation );
    }//GEN-LAST:event_moveTerritoryActionPerformed
    
    private void renameTerritoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameTerritoryActionPerformed
        renameSelectedTerritory();
    }//GEN-LAST:event_renameTerritoryActionPerformed
    
    private void deleteTerritoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTerritoryActionPerformed
        deleteSelectedTerritory();
    }//GEN-LAST:event_deleteTerritoryActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            // If we did not load system look and feel, ignore error and continue
        } catch(Exception e){}
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MapEditor().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Tools;
    private javax.swing.JCheckBoxMenuItem autosnapMenuItem;
    private javax.swing.JComboBox continentComboBox;
    private javax.swing.JMenuItem continents;
    private javax.swing.JLabel defaultContinentLabel;
    private javax.swing.JLabel defaultTypeLabel;
    private javax.swing.JMenuItem deleteTerritory;
    private javax.swing.JComboBox edgeTypesComboBox;
    private javax.swing.JRadioButton edgesRadioButton;
    private javax.swing.JMenuItem editForce;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem image;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JToolBar jToolBar;
    private org.invade.MapCanvas mapCanvas;
    private javax.swing.JPanel mapCanvasPanel;
    private javax.swing.JMenu mapMenu;
    private javax.swing.JMenuItem moveBoth;
    private javax.swing.JMenuItem moveCenter;
    private javax.swing.JMenu moveMenu;
    private javax.swing.JMenuItem moveTerritory;
    private javax.swing.JMenuItem newMap;
    private javax.swing.JMenuItem openMap;
    private javax.swing.JMenuItem redefinePolygon;
    private javax.swing.JMenuItem renameTerritory;
    private javax.swing.JMenuItem rules;
    private javax.swing.JMenuItem saveAsMap;
    private javax.swing.JMenuItem saveMap;
    private javax.swing.JMenu setContinentMenu;
    private javax.swing.JCheckBoxMenuItem setDevastated;
    private javax.swing.JMenuItem setHeight;
    private javax.swing.JCheckBoxMenuItem setLandingSite;
    private javax.swing.JCheckBoxMenuItem setPlague;
    private javax.swing.JMenuItem setSnapThreshold;
    private javax.swing.JMenuItem setWidth;
    private javax.swing.JMenuItem snapPolygon;
    private javax.swing.JMenuItem stretchHeight;
    private javax.swing.JMenuItem stretchWidth;
    private javax.swing.JRadioButton territoriesRadioButton;
    private javax.swing.JComboBox territoryTypeComboBox;
    private javax.swing.JMenu territoryTypeMenu;
    private javax.swing.ButtonGroup toolButtonGroup;
    // End of variables declaration//GEN-END:variables
    
    
    class PopupListener extends MouseAdapter {
        public void mousePressed(MouseEvent e) {
            maybeShowPopup(e);
        }
        public void mouseReleased(MouseEvent e) {
            maybeShowPopup(e);
        }
        private void maybeShowPopup(MouseEvent e) {
            if (territoriesRadioButton.isSelected() && e.isPopupTrigger()) {
                Point point = e.getPoint();
                point = mapCanvas.resolveZoom(point);
                if( definingBoundary ) {
                    endBoundaryDefinition();
                }
                Territory clicked = mapCanvas.getTerritoryAt(point);
                if( clicked != null ) {
                    setSelectedTerritory(clicked);
                    mapCanvas.repaint();
                    popupLocation.setLocation(e.getPoint());
                    setLandingSite.setSelected(getSelectedTerritory().isLandingSite());
                    setDevastated.setSelected(getSelectedTerritory().isDevastated());
                    setPlague.setSelected(getSelectedTerritory().isPlague());
                    jPopupMenu.show(e.getComponent(),
                            e.getX(), e.getY());
                } else {
                    // Right-clicked empty space
                    setSelectedTerritory(null);
                    mapCanvas.repaint();
                }
            }
        }
    }
    
    class TerritoryModeClickListener extends MouseInputAdapter {
        public void mousePressed(MouseEvent e) {
            if( e.getButton() == MouseEvent.BUTTON1 && mapCanvas.contains(e.getPoint() ) ) {
                Point point = e.getPoint();
                point = mapCanvas.resolveZoom(point);
                Territory clicked = mapCanvas.getTerritoryAt(point);
                if( !definingBoundary && !draggingCenter && !draggingTerritory ) {
                    setSelectedTerritory(clicked);
                    if( clicked != null ) {
                        draggingCenter = true;
                        draggingTerritory = ! mapCanvas.getCenterEllipse(clicked).contains(point);
                        setSelectedTerritory(clicked);
                        startDrag( point );
                        mapCanvas.repaint();
                    }
                }
            }
        }
        public void mouseReleased(MouseEvent e) {
            if( e.getButton() == MouseEvent.BUTTON1 && mapCanvas.contains(e.getPoint()) ) {
                // Double click: redefine boundaries
                if( (!definingBoundary) &&
                        getSelectedTerritory() != null && e.getClickCount() > 1 ) {
                    redefinePolygon();
                }
                
                if( draggingCenter || draggingTerritory ) {
                    endDrag();
                } else {
                    
                    Point point = e.getPoint();
                    point = mapCanvas.resolveZoom(point);
                    Territory clicked = mapCanvas.getTerritoryAt(point);
                    
                    if( ! definingBoundary ) {
                        if( clicked == null ) {
                            // No territory clicked; add new
                            setSelectedTerritory(new Territory());
                            getSelectedTerritory().getCenter().setLocation(point);
                            getSelectedTerritory().setType((TerritoryType)territoryTypeComboBox.getSelectedItem());
                            if( continentComboBox.getSelectedItem() instanceof Continent ) {
                                getSelectedTerritory().setContinent((Continent)continentComboBox.getSelectedItem());
                            }
                            getBoard().getTerritories().add( getSelectedTerritory());
                            if( e.getClickCount() == 1 ) {
                                // Single click:  define polygon
                                definingBoundary = true;
                                mapCanvas.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
                            }
                            mapCanvas.repaint();
                        }
                    } else {
                        if( getSelectedTerritory() != null ) {
                            if( e.getClickCount() == 1 ) {
                                // Single click:  add point
                                getSelectedTerritory().getShape().addPoint(point.x, point.y);
                            } else if( e.getClickCount() > 1 ) {
                                // Double click:  end shape
                                if( getSelectedTerritory().getShape().npoints <= 2 ) {
                                    getSelectedTerritory().setDefaultShape();
                                }
                                mapCanvas.repaint();
                                endBoundaryDefinition();
                            }
                            mapCanvas.repaint();
                        }
                    }
                }
            }
        }
        public void mouseMoved(MouseEvent e) {
            mouseMovedOrDragged(e);
        }
        public void mouseDragged(MouseEvent e) {
            mouseMovedOrDragged(e);
        }
        public void mouseMovedOrDragged(MouseEvent e) {
            Point point = e.getPoint();
            point = mapCanvas.resolveZoom(point);
            if( getSelectedTerritory() != null ) {
                boolean repaint = false;
                if( draggingCenter ) {
                    getSelectedTerritory().getCenter().translate(point.x - dragHandle.x, point.y - dragHandle.y);
                    repaint = true;
                }
                if( draggingTerritory ) {
                    getSelectedTerritory().getShape().translate(point.x - dragHandle.x, point.y - dragHandle.y);
                    repaint = true;
                }
                dragHandle.setLocation(point);
                if( repaint ) {
                    repaint();
                }
            }
        }
        public void mouseExited(MouseEvent e) {
            if( draggingCenter || draggingTerritory ) {
                endDrag();
            }
        }
    }
    
    class EdgeModeClickListener extends MouseAdapter {
        public void mouseClicked(MouseEvent e) {
            if( mapCanvas.contains(e.getPoint() ) ) {
                Point point = e.getPoint();
                point = mapCanvas.resolveZoom(point);
                Territory clicked = mapCanvas.getTerritoryAt(point);
                if( e.getButton() == MouseEvent.BUTTON1 ) {
                    if( clicked != null && getSelectedTerritory() != null ) {
                        if( getSelectedTerritory().getEdgeType(clicked) == null
                                || !getSelectedTerritory().getEdgeType(clicked).equals(currentEdgeType) ) {
                            getSelectedTerritory().setUndirectedEdge(clicked, currentEdgeType);
                        } else {
                            getSelectedTerritory().removeUndirectedEdge(clicked);
                        }
                    }
                }
                if( e.getButton() == MouseEvent.BUTTON3 ) {
                    setSelectedTerritory(clicked);
                }
                mapCanvas.repaint();
            }
        }
    }
    
    public void redefinePolygon() {
        if( getSelectedTerritory() != null ) {
            definingBoundary = true;
            getSelectedTerritory().getShape().reset();
            mapCanvas.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
            mapCanvas.repaint();
        }
    }
    
    public void setMode(EditMode newMode) {
        if( mode != null ) {
            if( mode.equals( EditMode.TERRITORIES ) ) {
                mapCanvas.removeMouseListener(popupListener);
                mapCanvas.removeMouseListener(territoryModeClickListener);
                mapCanvas.removeMouseMotionListener(territoryModeClickListener);
            } else if( mode.equals( EditMode.EDGES ) ) {
                mapCanvas.removeMouseListener(edgeModeClickListener);
            }
        }
        
        if( newMode.equals( EditMode.TERRITORIES ) ) {
            mapCanvas.addMouseListener(popupListener);
            mapCanvas.addMouseListener(territoryModeClickListener);
            mapCanvas.addMouseMotionListener(territoryModeClickListener);
        } else if( newMode.equals( EditMode.EDGES ) ) {
            mapCanvas.addMouseListener(edgeModeClickListener);
        }
        mode = newMode;
    }
    
    public Territory getSelectedTerritory() {
        return selectedTerritory;
    }
    
    public void setSelectedTerritory(Territory selectedTerritory) {
        this.selectedTerritory = selectedTerritory;
        mapCanvas.setHighlighted(selectedTerritory);
    }
    
    public void renameSelectedTerritory() {
        if( getSelectedTerritory() != null ) {
            mapCanvas.repaint();
            do {
                if( getSelectedTerritory().getName().equals("") ) {
                    getSelectedTerritory().setName("New Territory");
                }
                Object result = JOptionPane.showInputDialog(this, "New name", "Rename",
                        JOptionPane.QUESTION_MESSAGE, null, null, getSelectedTerritory().getName() );
                if( result != null ) {
                    getSelectedTerritory().setName( (String)result );
                    if( getSelectedTerritory().getName().equals("") ) {
                        JOptionPane.showMessageDialog(this, "Empty name not allowed",
                                "Rename", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } while( getSelectedTerritory().getName().equals("") );
            mapCanvas.repaint();
        }
    }
    
    public void deleteSelectedTerritory() {
        getBoard().removeTerritory( getSelectedTerritory() );
        mapCanvas.repaint();
    }
    
    public void endBoundaryDefinition() {
        definingBoundary = false;
        mapCanvas.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        
        if( getSelectedTerritory() != null ) {
            if( autosnap ) {
                snapPolygon();
            }
            if( getSelectedTerritory().getName().equals("") ) {
                renameSelectedTerritory();
            }
        }
    }
    
    public void startDrag( Point handle ) {
        mapCanvas.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        dragHandle.setLocation( handle );
    }
    
    public void endDrag() {
        draggingCenter = false;
        draggingTerritory = false;
        mapCanvas.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }
    
    public void setTerritoryType( TerritoryType type ) {
        if( getSelectedTerritory() != null ) {
            getSelectedTerritory().setType(type);
            mapCanvas.repaint();
        }
    }
    
    public void setContinent( Continent continent ) {
        if( getSelectedTerritory() != null ) {
            getSelectedTerritory().setContinent(continent);
            mapCanvas.repaint();
        }
    }
    
    public void updateContinentLists() {
        continentComboBox.removeAllItems();
        continentComboBox.addItem("<No Continent>");
        
        setContinentMenu.removeAll();
        JMenuItem item = new JMenuItem("<No Continent>");
        item.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                setContinent(null);
            }
        });
        setContinentMenu.add(item);
        for( final Continent continent : getBoard().getContinents() ) {
            continentComboBox.addItem(continent);
            
            item = new JMenuItem();
            item.setText( continent.toString() );
            item.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    setContinent(continent);
                }
            });
            setContinentMenu.add(item);
        }
    }
    
    
    public void newMap() {
        if(JOptionPane.showConfirmDialog(this, "Clear map?", "New",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)
                == JOptionPane.YES_OPTION ) {
            mapCanvas.setBoard(new Board());
            updateContinentLists();
            fileChooser.setSelectedFile(null);
            setTitle(title);
        }
    }
    
    public void open() {
        if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            Board newBoard = new Board();
            boolean loaded = XMLHandler.load(fileChooser.getSelectedFile(), newBoard);
            if(loaded) {
                mapCanvas.setBoard(newBoard);
                updateContinentLists();
                setTitle(title + " - " + fileChooser.getSelectedFile().getName());
            } else {
                JOptionPane.showMessageDialog(this, "Could not read from file",
                        "Error", JOptionPane.ERROR_MESSAGE, null);
            }
        }
    }
    
    public void save() {
        if(fileChooser.getSelectedFile() != null) {
            boolean saved = XMLHandler.save(fileChooser.getSelectedFile(), getBoard());
            if(!saved) {
                JOptionPane.showMessageDialog(this, "Could not write to file",
                        "Error", JOptionPane.ERROR_MESSAGE, null);
            }
        } else {
            saveAs();
        }
    }
    
    public void saveAs() {
        if(fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            setTitle(title + " - " + fileChooser.getSelectedFile().getName());
            save();
        }
    }
    
    public Board getBoard() {
        return mapCanvas.getBoard();
    }
    
    public void snapPolygon() {
        if( getSelectedTerritory() != null ) {
            for( int i = 0; i < getSelectedTerritory().getShape().npoints; ++i ) {
                int x = getSelectedTerritory().getShape().xpoints[i];
                int y = getSelectedTerritory().getShape().ypoints[i];
                double minDistance = Double.POSITIVE_INFINITY;
                Territory minTerritory = null;
                int minIndex = 0;
                for( Territory territory : getBoard().getTerritories() ) {
                    if( territory != getSelectedTerritory() ) {
                        for( int j = 0; j < territory.getShape().npoints; ++j ) {
                            double distance = Point.distance( x, y, territory.getShape().xpoints[j],
                                    territory.getShape().ypoints[j] );
                            if( distance < minDistance ) {
                                minDistance = distance;
                                minTerritory = territory;
                                minIndex = j;
                            }
                        }
                    }
                }
                if( minDistance <= snapThreshold ) {
                    getSelectedTerritory().getShape().xpoints[i] =
                            minTerritory.getShape().xpoints[minIndex];
                    getSelectedTerritory().getShape().ypoints[i] =
                            minTerritory.getShape().ypoints[minIndex];
                }
            }
            mapCanvas.repaint();
        }
    }
    
    public void confirmExit() {
        if( JOptionPane.showConfirmDialog(this, "Exit program?",
                "Exit", JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE ) == JOptionPane.YES_OPTION ) {
            System.exit(0);
        }
    }
    
}
