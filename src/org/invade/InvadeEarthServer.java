/*
 * InvadeEarthServer.java
 *
 * Created on July 25, 2005, 12:31 PM
 */

package org.invade;

import com.retrogui.dualrpc.server.ServerNotRunningException;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.net.InetAddress;
import java.net.UnknownHostException;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.UIManager;
import org.invade.gameserver.Server;
import org.invade.gameserver.ServerHandler;

/**
 *
 * @author  jcrosm
 */
public class InvadeEarthServer extends javax.swing.JFrame {
    
    private Server server;
    
    private AdvertiseHostDialog advertiseHostDialog = new AdvertiseHostDialog(this, false);
    
    private Timer timer;
    
    private static final int UPDATE_CONNECTION_COUNT_DELAY = 300; // ms
    public static final int DEFAULT_PORT = 2210;
    public static final int SHUTDOWN_TIME = 5; // seconds
    private int previousConnectionCount;
    
    /**
     * Creates new form InvadeEarthServer
     */
    public InvadeEarthServer() {
        initComponents();
        
        previousConnectionCount = 0;
        
        timer = new Timer(UPDATE_CONNECTION_COUNT_DELAY, new ActionListener() {
            public void actionPerformed(ActionEvent event) {
                updateConnections();
            }
        });
        
        portField.setText(Integer.toString(InvadeEarthServer.DEFAULT_PORT));
        
        try {
            internetAddressLabel.setText(InetAddress.getLocalHost().getCanonicalHostName()
            + "   IP: " + InetAddress.getLocalHost().getHostAddress());
            hostField.setText(InetAddress.getLocalHost().getHostAddress());
        } catch(UnknownHostException ex) {}
        
        runningPanel.setVisible(false);
        pack();
        WindowCenteringUtility.center(this);
        WindowCenteringUtility.center(advertiseHostDialog);
    }
    
    
    // Add list, boot options here
    public void updateConnections() {
        if(server != null && server.isRunning()) {
            int currentConnection = server.getCurrentConnectionCount();
            connectionsLabel.setText("Connection(s):  " + currentConnection);
            
            if( currentConnection  < previousConnectionCount ) {
                SoundDriver.play("Doorclose.wav");
            } else if( currentConnection > previousConnectionCount ) {
                SoundDriver.play("Bell.wav");
            }
            
            previousConnectionCount = currentConnection;
        }
    }
    
    public void forceRemoveFromList() {
        /* We can do this on the Event Dispatch thread since we are shutting
         * down the VM and server anyway.  This is ensure the advertisement
         * is removed before the VM terminates. */
        advertiseHostDialog.removeGameOnCurrentThread(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        serverPanel = new javax.swing.JPanel();
        hostField = new javax.swing.JTextField();
        portField = new javax.swing.JTextField();
        listenButton = new javax.swing.JButton();
        hostLabel = new javax.swing.JLabel();
        portLabel = new javax.swing.JLabel();
        internetAddressLabel = new javax.swing.JLabel();
        runningPanel = new javax.swing.JPanel();
        connectionInfoLabel = new javax.swing.JLabel();
        shutdownButton = new javax.swing.JButton();
        connectionsLabel = new javax.swing.JLabel();
        advertiseButton = new javax.swing.JButton();
        blockNewGameCheckbox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Server");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        serverPanel.setLayout(new java.awt.GridBagLayout());

        hostField.setText("localhost");
        hostField.setPreferredSize(new java.awt.Dimension(128, 19));
        hostField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostFieldActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        serverPanel.add(hostField, gridBagConstraints);

        portField.setPreferredSize(new java.awt.Dimension(48, 19));
        portField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portFieldActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        serverPanel.add(portField, gridBagConstraints);

        listenButton.setText("Listen");
        listenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listenButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        serverPanel.add(listenButton, gridBagConstraints);

        hostLabel.setText("Host name or IP address");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        serverPanel.add(hostLabel, gridBagConstraints);

        portLabel.setText("Port");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        serverPanel.add(portLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        serverPanel.add(internetAddressLabel, gridBagConstraints);

        getContentPane().add(serverPanel, java.awt.BorderLayout.CENTER);

        connectionInfoLabel.setText("Host, port");

        shutdownButton.setText("Shutdown");
        shutdownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shutdownButtonActionPerformed(evt);
            }
        });

        connectionsLabel.setText("Connection(s):  0");

        advertiseButton.setText("Advertise...");
        advertiseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advertiseButtonActionPerformed(evt);
            }
        });

        blockNewGameCheckbox.setText("Block \"new game\" commands");
        blockNewGameCheckbox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        blockNewGameCheckbox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        blockNewGameCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockNewGameCheckboxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout runningPanelLayout = new org.jdesktop.layout.GroupLayout(runningPanel);
        runningPanel.setLayout(runningPanelLayout);
        runningPanelLayout.setHorizontalGroup(
            runningPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(runningPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(runningPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(runningPanelLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(advertiseButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(shutdownButton))
                    .add(connectionInfoLabel)
                    .add(connectionsLabel)
                    .add(blockNewGameCheckbox))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        runningPanelLayout.setVerticalGroup(
            runningPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(runningPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(connectionInfoLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(connectionsLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(blockNewGameCheckbox)
                .add(12, 12, 12)
                .add(runningPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(shutdownButton)
                    .add(advertiseButton))
                .addContainerGap())
        );
        getContentPane().add(runningPanel, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void blockNewGameCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockNewGameCheckboxActionPerformed
        ServerHandler.setBlockNewGameRequests(blockNewGameCheckbox.isSelected());
    }//GEN-LAST:event_blockNewGameCheckboxActionPerformed
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        forceRemoveFromList();
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing
    
    private void advertiseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advertiseButtonActionPerformed
        advertiseHostDialog.setVisible(true);
    }//GEN-LAST:event_advertiseButtonActionPerformed
    
    private void portFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portFieldActionPerformed
        listenButton.doClick();
    }//GEN-LAST:event_portFieldActionPerformed
    
    private void hostFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostFieldActionPerformed
        listenButton.doClick();
    }//GEN-LAST:event_hostFieldActionPerformed
    
    private void shutdownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shutdownButtonActionPerformed
        shutdownButton.setEnabled(false);
        advertiseButton.setEnabled(false);
        forceRemoveFromList();
        new Thread("ServerShutdownThread") {
            public void run() {
                connectionInfoLabel.setText("Shutting down");
                connectionInfoLabel.setForeground(Color.RED);
                try {
                    server.shutdown();
                } catch(Exception e) {
                    e.printStackTrace();
                    // We were quitting anyway
                    System.exit(0);
                }
            }
        }.start();
    }//GEN-LAST:event_shutdownButtonActionPerformed
    
    private void listenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listenButtonActionPerformed
        try {
            final String host = hostField.getText();
            final int port = Integer.parseInt(portField.getText());
            final Server server = new Server();
            new Thread("ServerThread") {
                public void run() {
                    try {
                        server.startServer(host, port);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        final String message = ex.toString();
                        java.awt.EventQueue.invokeLater(new Runnable() {
                            public void run() {
                                JOptionPane.showMessageDialog(InvadeEarthServer.this, "Error starting server\n" + message, "Error",
                                        JOptionPane.ERROR_MESSAGE);
                            }
                        });
                    }
                }
            }.start();
            this.server = server;
            advertiseHostDialog.setServer(server);
            runningPanel.setVisible(true);
            serverPanel.setVisible(false);
            connectionInfoLabel.setText("Host: " + host + " on port " + port);
            timer.start();
            updateConnections();
            pack();
        } catch(NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Port number must be an integer", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_listenButtonActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        if( args.length == 0 ) {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                // If we did not load system look and feel, ignore error and continue
            } catch(Exception e){}
            
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new InvadeEarthServer().setVisible(true);
                }
            });
            
        } else {
            
            // *** Command-line version ***
            
            System.out.println("Invade Earth command line server");
            System.out.println("Arguments:");
            System.out.println("1. Host name or IP address (required)");
            System.out.println("2. Port number");
            System.out.println("3-6. Server list strings (rules, map, players, description) ");
            if( args.length > 0 ) {
                String host = args[0];
                int port = DEFAULT_PORT;
                try {
                    if( args.length > 1 ) {
                        port = Integer.parseInt(args[1]);
                    }
                    final Server server = new Server();
                    final String h = host;
                    final int p = port;
                    new Thread("ServerThread") {
                        public void run() {
                            try {
                                server.startServer(h, p);
                            } catch (IOException ex) {
                                ex.printStackTrace();
                            } catch (ClassNotFoundException ex) {
                                ex.printStackTrace();
                            }
                        }
                    }.start();
                    System.out.println("*** Service started ***");
                    BigInteger listingID = commandLineServerPost(args);
                    System.out.println("Commands:  exit, post, remove");
                    BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
                    String command = "";
                    while(true) {
                        try {
                            command = input.readLine().toLowerCase();
                        } catch(IOException e) {
                            e.printStackTrace();
                        }
                        if(command.equals("exit")) {
                            try {
                                ServerListHandler.postRemoveGame(listingID);
                                server.shutdown();
                            } catch(ServerNotRunningException e) {
                                e.printStackTrace();
                            } finally {
                                System.exit(0);
                            }
                        } else if(command.equals("post")) {
                            listingID = commandLineServerPost(args);
                        } else if(command.equals("remove")) {
                            if( listingID.compareTo(BigInteger.ONE) >= 0 ) {
                                listingID = ServerListHandler.postRemoveGame(listingID);
                                if( listingID.compareTo(BigInteger.ONE) >= 0 ) {
                                    System.out.println("Server list remove successful");
                                } else {
                                    System.out.println("Error removing from server list (error="+listingID+")");
                                }
                            }
                        }
                    }
                }  catch(NumberFormatException ex) {
                    System.out.println("Port number must be an integer");
                }
            }
        }
        
    }
    private static BigInteger commandLineServerPost(String args[]) {
        BigInteger listingID = BigInteger.ZERO;
        if( args.length > 5 ) {
            listingID = ServerListHandler.postNewGame(Integer.parseInt(args[1]), args[2], args[3],
                    args[4], args[5]);
            if(listingID.compareTo(BigInteger.ONE) < 0) {
                System.out.println("Error posting to server list (error="+listingID+")");
            } else {
                System.out.println("Server list post successful (id="+listingID+")");
            }
        }
        
        return listingID;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton advertiseButton;
    private javax.swing.JCheckBox blockNewGameCheckbox;
    private javax.swing.JLabel connectionInfoLabel;
    private javax.swing.JLabel connectionsLabel;
    private javax.swing.JTextField hostField;
    private javax.swing.JLabel hostLabel;
    private javax.swing.JLabel internetAddressLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton listenButton;
    private javax.swing.JTextField portField;
    private javax.swing.JLabel portLabel;
    private javax.swing.JPanel runningPanel;
    private javax.swing.JPanel serverPanel;
    private javax.swing.JButton shutdownButton;
    // End of variables declaration//GEN-END:variables
    
}
